{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "invocations": [
        {
          "exitCodeDescription": "PVS-Studio Analyzer Warnings",
          "executionSuccessful": true,
          "toolExecutionNotifications": [
            {
              "descriptor": {
                "id": "V010"
              },
              "associatedRule": {
                "id": "V010"
              },
              "message": {
                "text": "V010 Analysis of 'Utility' type projects is not supported in this tool. Use direct analyzer integration or compiler monitoring instead."
              }
            }
          ]
        },
        {
          "exitCodeDescription": "PVS-Studio Analyzer Warnings",
          "executionSuccessful": true,
          "toolExecutionNotifications": [
            {
              "descriptor": {
                "id": "Renew"
              },
              "associatedRule": {
                "id": "Renew"
              },
              "message": {
                "text": "Renew Your license will expire in 7 days. Click 'Renew' to learn more or contact us via Feedback form on our website. This is an information message. You can continue using the analyzer with your current license. To hide this message, use the '--disableLicenseExpirationCheck' flag."
              }
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "PVS-Studio",
          "semanticVersion": "7.34.87491.1460",
          "informationUri": "https://pvs-studio.com",
          "rules": [
            {
              "id": "V550",
              "name": "RuleV550",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v550/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v550/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V802",
              "name": "RuleV802",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v802/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v802/"
            },
            {
              "id": "V835",
              "name": "RuleV835",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v835/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v835/"
            },
            {
              "id": "V813",
              "name": "RuleV813",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v813/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v813/"
            },
            {
              "id": "V832",
              "name": "RuleV832",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v832/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v832/"
            },
            {
              "id": "V690",
              "name": "RuleV690",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v690/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v690/"
            },
            {
              "id": "V685",
              "name": "RuleV685",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v685/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v685/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-480"
                ]
              }
            },
            {
              "id": "V730",
              "name": "RuleV730",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v730/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v730/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-457"
                ]
              }
            },
            {
              "id": "V801",
              "name": "RuleV801",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v801/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v801/"
            },
            {
              "id": "V610",
              "name": "RuleV610",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v610/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v610/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-758"
                ]
              }
            },
            {
              "id": "V580",
              "name": "RuleV580",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v580/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v580/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-843"
                ]
              }
            },
            {
              "id": "V803",
              "name": "RuleV803",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v803/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v803/"
            },
            {
              "id": "V823",
              "name": "RuleV823",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v823/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v823/"
            },
            {
              "id": "V837",
              "name": "RuleV837",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v837/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v837/"
            },
            {
              "id": "V524",
              "name": "RuleV524",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v524/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v524/"
            },
            {
              "id": "V591",
              "name": "RuleV591",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v591/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v591/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-393"
                ]
              }
            },
            {
              "id": "V1077",
              "name": "RuleV1077",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1077/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1077/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-457"
                ]
              }
            },
            {
              "id": "V809",
              "name": "RuleV809",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v809/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v809/"
            },
            {
              "id": "V1034",
              "name": "RuleV1034",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1034/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1034/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-834"
                ]
              }
            },
            {
              "id": "V1026",
              "name": "RuleV1026",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1026/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1026/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-190"
                ]
              }
            },
            {
              "id": "V1096",
              "name": "RuleV1096",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1096/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1096/"
            },
            {
              "id": "V807",
              "name": "RuleV807",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v807/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v807/"
            },
            {
              "id": "V1008",
              "name": "RuleV1008",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1008/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1008/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-691"
                ]
              }
            },
            {
              "id": "V781",
              "name": "RuleV781",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v781/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v781/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ]
              }
            },
            {
              "id": "V636",
              "name": "RuleV636",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v636/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v636/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V779",
              "name": "RuleV779",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v779/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v779/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-561"
                ]
              }
            },
            {
              "id": "V783",
              "name": "RuleV783",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v783/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v783/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-119"
                ]
              }
            },
            {
              "id": "V1053",
              "name": "RuleV1053",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1053/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1053/"
            },
            {
              "id": "V703",
              "name": "RuleV703",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v703/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v703/"
            },
            {
              "id": "V810",
              "name": "RuleV810",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v810/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v810/"
            },
            {
              "id": "V839",
              "name": "RuleV839",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v839/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v839/"
            },
            {
              "id": "V820",
              "name": "RuleV820",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v820/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v820/"
            },
            {
              "id": "V502",
              "name": "RuleV502",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v502/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v502/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-783"
                ]
              }
            },
            {
              "id": "V815",
              "name": "RuleV815",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v815/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v815/"
            },
            {
              "id": "V501",
              "name": "RuleV501",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v501/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v501/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-570"
                ]
              }
            },
            {
              "id": "V537",
              "name": "RuleV537",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v537/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v537/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V601",
              "name": "RuleV601",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v601/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v601/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-704"
                ]
              }
            },
            {
              "id": "V1032",
              "name": "RuleV1032",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1032/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1032/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-843"
                ]
              }
            },
            {
              "id": "V673",
              "name": "RuleV673",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v673/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v673/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-190"
                ]
              }
            },
            {
              "id": "V821",
              "name": "RuleV821",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v821/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v821/"
            },
            {
              "id": "V615",
              "name": "RuleV615",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v615/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v615/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-704"
                ]
              }
            },
            {
              "id": "V512",
              "name": "RuleV512",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v512/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v512/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-119"
                ]
              }
            },
            {
              "id": "V1003",
              "name": "RuleV1003",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1003/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1003/"
            },
            {
              "id": "V656",
              "name": "RuleV656",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v656/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v656/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-665"
                ]
              }
            },
            {
              "id": "V701",
              "name": "RuleV701",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v701/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v701/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-401"
                ]
              }
            },
            {
              "id": "V1037",
              "name": "RuleV1037",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1037/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1037/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-691"
                ]
              }
            },
            {
              "id": "V556",
              "name": "RuleV556",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v556/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v556/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-697"
                ]
              }
            },
            {
              "id": "V1042",
              "name": "RuleV1042",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1042/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1042/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-1177"
                ]
              }
            },
            {
              "id": "V522",
              "name": "RuleV522",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v522/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v522/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-690"
                ]
              }
            },
            {
              "id": "V575",
              "name": "RuleV575",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v575/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v575/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-628"
                ]
              }
            },
            {
              "id": "V659",
              "name": "RuleV659",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v659/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v659/"
            },
            {
              "id": "V669",
              "name": "RuleV669",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v669/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v669/"
            },
            {
              "id": "V592",
              "name": "RuleV592",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v592/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v592/"
            },
            {
              "id": "V519",
              "name": "RuleV519",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v519/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v519/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-563"
                ]
              }
            },
            {
              "id": "V773",
              "name": "RuleV773",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v773/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v773/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-401"
                ]
              }
            },
            {
              "id": "V560",
              "name": "RuleV560",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v560/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v560/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V516",
              "name": "RuleV516",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v516/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v516/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V547",
              "name": "RuleV547",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v547/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v547/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V776",
              "name": "RuleV776",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v776/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v776/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-836"
                ]
              }
            },
            {
              "id": "V824",
              "name": "RuleV824",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v824/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v824/"
            },
            {
              "id": "V1044",
              "name": "RuleV1044",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1044/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1044/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-834"
                ]
              }
            },
            {
              "id": "V1061",
              "name": "RuleV1061",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1061/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1061/"
            },
            {
              "id": "V826",
              "name": "RuleV826",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v826/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v826/"
            },
            {
              "id": "V1040",
              "name": "RuleV1040",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1040/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1040/"
            },
            {
              "id": "V1090",
              "name": "RuleV1090",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1090/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1090/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-248"
                ]
              }
            },
            {
              "id": "V1048",
              "name": "RuleV1048",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1048/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1048/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-1164"
                ]
              }
            },
            {
              "id": "V1106",
              "name": "RuleV1106",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1106/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1106/"
            },
            {
              "id": "V1016",
              "name": "RuleV1016",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1016/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1016/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-681"
                ]
              }
            },
            {
              "id": "V1059",
              "name": "RuleV1059",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1059/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1059/"
            },
            {
              "id": "V678",
              "name": "RuleV678",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v678/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v678/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-688"
                ]
              }
            },
            {
              "id": "V602",
              "name": "RuleV602",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v602/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v602/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-480"
                ]
              }
            },
            {
              "id": "V565",
              "name": "RuleV565",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v565/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v565/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-544"
                ]
              }
            },
            {
              "id": "V1020",
              "name": "RuleV1020",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1020/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1020/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-772"
                ]
              }
            },
            {
              "id": "V717",
              "name": "RuleV717",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v717/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v717/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-843"
                ]
              }
            },
            {
              "id": "V1071",
              "name": "RuleV1071",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1071/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1071/"
            },
            {
              "id": "V572",
              "name": "RuleV572",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v572/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v572/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-665"
                ]
              }
            },
            {
              "id": "V1062",
              "name": "RuleV1062",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1062/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1062/"
            },
            {
              "id": "V769",
              "name": "RuleV769",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v769/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v769/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-119"
                ]
              }
            },
            {
              "id": "V794",
              "name": "RuleV794",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v794/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v794/"
            },
            {
              "id": "V677",
              "name": "RuleV677",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v677/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v677/"
            },
            {
              "id": "V1051",
              "name": "RuleV1051",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1051/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1051/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-754"
                ]
              }
            },
            {
              "id": "V760",
              "name": "RuleV760",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v760/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v760/"
            },
            {
              "id": "V1004",
              "name": "RuleV1004",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1004/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1004/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-476"
                ]
              }
            },
            {
              "id": "V688",
              "name": "RuleV688",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v688/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v688/"
            },
            {
              "id": "V568",
              "name": "RuleV568",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v568/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v568/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-131"
                ]
              }
            },
            {
              "id": "V579",
              "name": "RuleV579",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v579/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v579/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-687"
                ]
              }
            },
            {
              "id": "V506",
              "name": "RuleV506",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v506/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v506/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-562"
                ]
              }
            },
            {
              "id": "V1086",
              "name": "RuleV1086",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1086/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1086/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V768",
              "name": "RuleV768",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v768/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v768/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V667",
              "name": "RuleV667",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v667/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v667/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-480"
                ]
              }
            },
            {
              "id": "V607",
              "name": "RuleV607",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v607/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v607/"
            },
            {
              "id": "V595",
              "name": "RuleV595",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v595/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v595/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-476"
                ]
              }
            },
            {
              "id": "V811",
              "name": "RuleV811",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v811/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v811/"
            },
            {
              "id": "V728",
              "name": "RuleV728",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v728/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v728/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V764",
              "name": "RuleV764",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v764/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v764/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-683"
                ]
              }
            },
            {
              "id": "V805",
              "name": "RuleV805",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v805/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v805/"
            },
            {
              "id": "V808",
              "name": "RuleV808",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v808/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v808/"
            },
            {
              "id": "V631",
              "name": "RuleV631",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v631/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v631/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-39"
                ]
              }
            },
            {
              "id": "V674",
              "name": "RuleV674",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v674/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v674/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V836",
              "name": "RuleV836",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v836/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v836/"
            },
            {
              "id": "V1073",
              "name": "RuleV1073",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1073/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1073/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-483"
                ]
              }
            },
            {
              "id": "V827",
              "name": "RuleV827",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v827/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v827/"
            },
            {
              "id": "V668",
              "name": "RuleV668",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v668/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v668/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V583",
              "name": "RuleV583",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v583/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v583/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-783"
                ]
              }
            },
            {
              "id": "V829",
              "name": "RuleV829",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v829/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v829/"
            },
            {
              "id": "V648",
              "name": "RuleV648",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v648/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v648/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-783"
                ]
              }
            },
            {
              "id": "V780",
              "name": "RuleV780",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v780/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v780/"
            },
            {
              "id": "V525",
              "name": "RuleV525",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v525/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v525/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V1028",
              "name": "RuleV1028",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1028/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1028/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-190"
                ]
              }
            },
            {
              "id": "V1068",
              "name": "RuleV1068",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1068/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1068/"
            },
            {
              "id": "V838",
              "name": "RuleV838",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v838/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v838/"
            },
            {
              "id": "V526",
              "name": "RuleV526",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v526/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v526/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-253"
                ]
              }
            },
            {
              "id": "V1089",
              "name": "RuleV1089",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v1089/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v1089/"
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: theta != 0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/affine.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 413
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 790,
                  "endLine": 790
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum CreateFlags& a' with 'enum CreateFlags a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1015,
                  "endLine": 1015
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum CreateFlags& val' with 'enum CreateFlags val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1015,
                  "endLine": 1015
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum CreateFlags& b' with 'enum CreateFlags b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1015,
                  "endLine": 1015
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum CreateFlags& val' with 'enum CreateFlags val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1015,
                  "endLine": 1015
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& b' with 'int b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1015,
                  "endLine": 1015
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 184
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cuda.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 190,
                  "endLine": 190
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cvstd.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cvstd.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cvstd_wrapper.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cvstd_wrapper.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cvstd_wrapper.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/cvstd_wrapper.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'MatStep' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3461,
                  "endLine": 3461
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum AccessFlag& a' with 'enum AccessFlag a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum AccessFlag& val' with 'enum AccessFlag val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum AccessFlag& b' with 'enum AccessFlag b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum AccessFlag& val' with 'enum AccessFlag val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& b' with 'int b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const int& a' with 'int a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum AccessFlag& b' with 'enum AccessFlag b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum KindFlag& a' with 'enum KindFlag a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum KindFlag& val' with 'enum KindFlag val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum KindFlag& b' with 'enum KindFlag b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum KindFlag& val' with 'enum KindFlag val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& b' with 'int b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const int& a' with 'int a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum KindFlag& b' with 'enum KindFlag b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum MemoryFlag& a' with 'enum MemoryFlag a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum MemoryFlag& val' with 'enum MemoryFlag val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum MemoryFlag& b' with 'enum MemoryFlag b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum MemoryFlag& val' with 'enum MemoryFlag val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& b' with 'int b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3000,
                  "endLine": 3000
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2816,
                  "endLine": 2816
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: buf."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1238,
                  "endLine": 1238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: buf."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1244,
                  "endLine": 1244
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. list' with 'const .. &list'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 479
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. sizes' with 'const .. &sizes'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the second function argument as a reference. Consider replacing 'const .. list' with 'const .. &list'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. sizes' with 'const .. &sizes'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1416,
                  "endLine": 1416
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2470,
                  "endLine": 2470
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2868,
                  "endLine": 2868
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2922,
                  "endLine": 2922
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const double& val' with 'double val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/mat.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144
                }
              }
            }
          ]
        },
        {
          "ruleId": "V610",
          "message": {
            "text": "Undefined behavior. Check the shift operator '<<'. The left operand '((cn) - 1)' is negative."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/matx.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 728,
                  "endLine": 728
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/matx.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/matx.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 745,
                  "endLine": 745
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: p == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/matx.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(nv) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/matx.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 955,
                  "endLine": 955
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/matx.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 769,
                  "endLine": 769
                }
              }
            }
          ]
        },
        {
          "ruleId": "V580",
          "message": {
            "text": "An odd explicit type casting: (int (*)[2]) & _nodes[0]. Consider verifying it."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 531,
                  "endLine": 531
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 350,
                  "endLine": 350
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: invert(a, b, method) != 0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: invert(a, b, method) != 0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& b' with 'double b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& b' with 'double b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& b' with 'double b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 312,
                  "endLine": 312
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& b' with 'double b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/operations.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 313,
                  "endLine": 313
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& value' with 'int value'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/persistence.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 883,
                  "endLine": 883
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const float& value' with 'float value'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/persistence.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 889,
                  "endLine": 889
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& value' with 'double value'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/persistence.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 895,
                  "endLine": 895
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: buf."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/utility.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 972,
                  "endLine": 972
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The copy assignment operator is declared as private in the 'PixelOperationWrapper' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/utility.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 631,
                  "endLine": 631
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: buf."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/utility.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 979,
                  "endLine": 979
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: buf."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/core/include/opencv2/core/utility.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 987,
                  "endLine": 987
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'it' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 392,
                  "endLine": 392
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'dict' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'getIntValue' function is fully equivalent to the body of 'get' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'getIntValue' function is fully equivalent to the body of 'get' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 117,
                  "startLine": 117
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'getIntValue' function is fully equivalent to the body of 'get' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 122,
                  "startLine": 122
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: fracpart == 0.0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/dnn/include/opencv2/dnn/dnn.inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'm' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1232,
                  "endLine": 1232
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'DescriptorCollection' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1198,
                  "endLine": 1198
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 80 to 64 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 749,
                  "endLine": 749
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum DrawMatchesFlags& a' with 'enum DrawMatchesFlags a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1355,
                  "endLine": 1355
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum DrawMatchesFlags& val' with 'enum DrawMatchesFlags val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1355,
                  "endLine": 1355
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum DrawMatchesFlags& b' with 'enum DrawMatchesFlags b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1355,
                  "endLine": 1355
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const enum DrawMatchesFlags& val' with 'enum DrawMatchesFlags val'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1355,
                  "endLine": 1355
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& b' with 'int b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/features2d/include/opencv2/features2d.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1355,
                  "endLine": 1355
                }
              }
            }
          ]
        },
        {
          "ruleId": "V591",
          "message": {
            "text": "Non-void function should return a value."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 507,
                  "endLine": 507
                }
              }
            }
          ]
        },
        {
          "ruleId": "V591",
          "message": {
            "text": "Non-void function should return a value."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 537,
                  "endLine": 537
                }
              }
            }
          ]
        },
        {
          "ruleId": "V591",
          "message": {
            "text": "Non-void function should return a value."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 543,
                  "endLine": 543
                }
              }
            }
          ]
        },
        {
          "ruleId": "V591",
          "message": {
            "text": "Non-void function should return a value."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 550,
                  "endLine": 550
                }
              }
            }
          ]
        },
        {
          "ruleId": "V591",
          "message": {
            "text": "Non-void function should return a value."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 556,
                  "endLine": 556
                }
              }
            }
          ]
        },
        {
          "ruleId": "V591",
          "message": {
            "text": "Non-void function should return a value."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 525,
                  "endLine": 525
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'Index_' constructor contains potentially uninitialized members. Inspect the following: nnIndex_L1, nnIndex_L2."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 442,
                  "endLine": 442
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'Index_' constructor contains potentially uninitialized members. Inspect the following: nnIndex_L1, nnIndex_L2."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 442,
                  "startLine": 442
                }
              }
            },
            {
              "message": {
                "text": "The 'Index_' constructor contains potentially uninitialized members. Inspect the following: nnIndex_L1, nnIndex_L2."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 451,
                  "startLine": 451
                }
              }
            },
            {
              "message": {
                "text": "The 'Index_' constructor contains potentially uninitialized members. Inspect the following: nnIndex_L1, nnIndex_L2."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 452,
                  "startLine": 452
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (nnIndex_L1)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 468,
                  "endLine": 468
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (nnIndex_L2)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 469,
                  "endLine": 469
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 40 to 32 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/allocator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/any.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: bestSearchTime == - 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/autotuned_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 531,
                  "endLine": 531
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1034",
          "message": {
            "text": "Do not use real type variables as loop counters."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/autotuned_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 528,
                  "endLine": 528
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'result' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 694,
                  "endLine": 694
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'result' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 724,
                  "endLine": 724
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'result' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 847,
                  "endLine": 847
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'result' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 877,
                  "endLine": 877
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'popCountTable' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 524,
                  "endLine": 524
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'popCountTable' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 788,
                  "endLine": 788
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'reset' function is fully equivalent to the body of 'clear' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dynamic_bitset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'reset' function is fully equivalent to the body of 'clear' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dynamic_bitset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 79,
                  "startLine": 79
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'reset' function is fully equivalent to the body of 'clear' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/dynamic_bitset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 94,
                  "startLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'heapIt->second.heapPtr' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/heap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'heapIt->second.heapPtr' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/heap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 213,
                  "startLine": 213
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'heapIt->second.heapPtr' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/heap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 214,
                  "startLine": 214
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'heapIt->second.heapPtr' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/heap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 215,
                  "startLine": 215
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'HierarchicalClusteringIndex' constructor contains potentially uninitialized members. Inspect the following: chooseCenters."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/hierarchical_clustering_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 358
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'HierarchicalClusteringIndex' constructor contains potentially uninitialized members. Inspect the following: chooseCenters."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/hierarchical_clustering_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 358,
                  "startLine": 358
                }
              }
            },
            {
              "message": {
                "text": "The 'HierarchicalClusteringIndex' constructor contains potentially uninitialized members. Inspect the following: chooseCenters."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/hierarchical_clustering_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 373,
                  "startLine": 373
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (root != 0)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/hierarchical_clustering_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (root != 0)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/hierarchical_clustering_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 488,
                  "endLine": 488
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1008",
          "message": {
            "text": "Consider inspecting the 'for' operator. No more than one iteration of the loop will be performed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/hierarchical_clustering_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 231
                }
              }
            }
          ]
        },
        {
          "ruleId": "V781",
          "message": {
            "text": "The value of the 'pindex' index is checked after it was used. Perhaps there is a mistake in program logic."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/index_testing.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'nn * testData.rows' expression was implicitly cast from 'size_t' type to 'float' type. Consider utilizing an explicit type cast to avoid overflow. An example: double A = (double)(X) * Y;."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/index_testing.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'correct' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/index_testing.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (tree_roots_ != 0)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kdtree_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (tree_roots_ != 0)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kdtree_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The copy assignment operator is declared as private in the 'KMeansDistanceComputer' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kmeans_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 288,
                  "endLine": 288
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'KMeansIndex' constructor contains potentially uninitialized members. Inspect the following: chooseCenters."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kmeans_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 346,
                  "endLine": 346
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'KMeansIndex' constructor contains potentially uninitialized members. Inspect the following: chooseCenters."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kmeans_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 346,
                  "startLine": 346
                }
              }
            },
            {
              "message": {
                "text": "The 'KMeansIndex' constructor contains potentially uninitialized members. Inspect the following: chooseCenters."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kmeans_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 364,
                  "startLine": 364
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1008",
          "message": {
            "text": "Consider inspecting the 'for' operator. No more than one iteration of the loop will be performed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/kmeans_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 240,
                  "endLine": 240
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'logger' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/logger.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'score_index_heap' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/lsh_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'score_index_heap' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/lsh_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333
                }
              }
            }
          ]
        },
        {
          "ruleId": "V779",
          "message": {
            "text": "Unreachable code detected. It is possible that an error is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/lsh_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'stats.size_histogram_' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/lsh_table.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 493,
                  "endLine": 493
                }
              }
            }
          ]
        },
        {
          "ruleId": "V783",
          "message": {
            "text": "Dereferencing of the invalid iterator 'buckets_space_.find(key)' might take place."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/lsh_table.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: type."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/matrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/matrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/nn_index.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: indices, dists."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'dist_indices_' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 413
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'dist_indices_' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 470,
                  "endLine": 470
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1053",
          "message": {
            "text": "Calling the 'clear' virtual function in the constructor may lead to unexpected result at runtime."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1053",
          "message": {
            "text": "Calling the 'clear' virtual function in the constructor may lead to unexpected result at runtime."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 522,
                  "endLine": 522
                }
              }
            }
          ]
        },
        {
          "ruleId": "V703",
          "message": {
            "text": "It is odd that the 'capacity_' field in derived class 'KNNRadiusUniqueResultSet' overwrites field in base class 'KNNUniqueResultSet'. Check lines: result_set.h:539, result_set.h:443."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 539,
                  "endLine": 539
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the 'capacity_' field in derived class 'KNNRadiusUniqueResultSet' overwrites field in base class 'KNNUniqueResultSet'. Check lines: result_set.h:539, result_set.h:443."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 443,
                  "startLine": 443
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the 'capacity_' field in derived class 'KNNRadiusUniqueResultSet' overwrites field in base class 'KNNUniqueResultSet'. Check lines: result_set.h:539, result_set.h:443."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 539,
                  "startLine": 539
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. dist_index' with 'const .. &dist_index'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/flann/include/opencv2/flann/result_set.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250
                }
              }
            }
          ]
        },
        {
          "ruleId": "V810",
          "message": {
            "text": "Decreased performance. The 'std::min(pt1.x, pt2.x)' function was called several times with identical arguments. The result should possibly be saved to a temporary variable, which then could be used while calling the 'Rect' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/imgproc/include/opencv2/imgproc.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4957,
                  "endLine": 4957
                }
              }
            }
          ]
        },
        {
          "ruleId": "V810",
          "message": {
            "text": "Decreased performance. The 'std::min(pt1.y, pt2.y)' function was called several times with identical arguments. The result should possibly be saved to a temporary variable, which then could be used while calling the 'Rect' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/imgproc/include/opencv2/imgproc.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4957,
                  "endLine": 4957
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1053",
          "message": {
            "text": "Calling the 'load' virtual function in the constructor may lead to unexpected result at runtime."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/objdetect/include/opencv2/objdetect.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 453
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'HOGDescriptor' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/objdetect/include/opencv2/objdetect.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: nbins, derivAperture, winSigma, histogramNormType, L2HysThreshold, gammaCorrection, ..."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/objdetect/include/opencv2/objdetect.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 459
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 192 to 176 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/objdetect/include/opencv2/objdetect/aruco_detector.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The '_id' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'bundleAdjuster' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'estimator' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 230,
                  "endLine": 230
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'warper' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'exposureCompensator' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 239,
                  "endLine": 239
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'seamFinder' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'blender' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'features_finder' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 210
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'features_matcher' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'bundle_adjuster' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'estimator' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'creator' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'exposure_comp' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'seam_finder' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'b' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'setMatGains' function is fully equivalent to the body of 'getMatGains' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/detail/exposure_compensate.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'setMatGains' function is fully equivalent to the body of 'getMatGains' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/detail/exposure_compensate.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 104,
                  "startLine": 104
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'setMatGains' function is fully equivalent to the body of 'getMatGains' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/detail/exposure_compensate.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 105,
                  "startLine": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const pair < size_t, size_t >& l' with 'pair < size_t, size_t > l'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/detail/seam_finders.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const pair < size_t, size_t >& r' with 'pair < size_t, size_t > r'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/detail/seam_finders.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1034",
          "message": {
            "text": "Do not use real type variables as loop counters."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/detail/warpers_inl.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 193,
                  "endLine": 193
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/warpers.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/BigTools/V2448/opencv2/modules/stitching/include/opencv2/stitching/warpers.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'ArrayWrapper' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/ArrayWrapper.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'MatrixWrapper' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/ArrayWrapper.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138
                }
              }
            }
          ]
        },
        {
          "ruleId": "V502",
          "message": {
            "text": "Perhaps the '?:' operator works in a different way than it was expected. The '?:' operator has a lower priority than the '&&' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/AssignEvaluator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'BlockImpl_dense' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Block.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 172
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'CommaInitializer' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CommaInitializer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreEvaluators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreEvaluators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreIterators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreIterators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreIterators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreIterators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CoreIterators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'CwiseUnaryView' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/CwiseUnaryView.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 581,
                  "endLine": 581
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 269,
                  "startLine": 269
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 270,
                  "startLine": 270
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 298,
                  "startLine": 298
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 299,
                  "startLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 327,
                  "startLine": 327
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'resize' function is fully equivalent to the body of 'conservativeResize' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 328,
                  "startLine": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DenseStorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Diagonal' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Diagonal.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'cols' function is fully equivalent to the body of 'rows' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DiagonalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'cols' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DiagonalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 54,
                  "startLine": 54
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'cols' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DiagonalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 56,
                  "startLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DiagonalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const DiagonalBase& other' with 'DiagonalBase other'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/DiagonalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'rowSpacer(\"\")' with 'rowSpacer()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/IO.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Map' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Map.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1394,
                  "endLine": 1394
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1394,
                  "endLine": 1394
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const bool& x' with 'bool x'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1394,
                  "endLine": 1394
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1406,
                  "endLine": 1406
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const bool& x' with 'bool x'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1406,
                  "endLine": 1406
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& y' with 'bool y'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1406,
                  "endLine": 1406
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'inverse' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PermutationMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'inverse' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PermutationMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 196,
                  "startLine": 196
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'inverse' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PermutationMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 202,
                  "startLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PermutationMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PermutationMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 570,
                  "endLine": 570
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PlainObjectBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PlainObjectBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 746,
                  "endLine": 746
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PlainObjectBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 746,
                  "endLine": 746
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PlainObjectBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 784,
                  "endLine": 784
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/PlainObjectBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 844,
                  "endLine": 844
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/ProductEvaluators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 272
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/ProductEvaluators.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'RefBase' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Ref.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Reverse' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Reverse.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/SolverBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/SolverBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "V501",
          "message": {
            "text": "There are identical sub-expressions to the left and to the right of the '!=' operator: amed != amed"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/StableNorm.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Stride' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Stride.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Transpose' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Transpose.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'inverse' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Transpositions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'inverse' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Transpositions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 108,
                  "startLine": 108
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'inverse' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Transpositions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 112,
                  "startLine": 112
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'TranspositionsWrapper' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Transpositions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 288,
                  "endLine": 288
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/Transpositions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'TriangularView' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/TriangularMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/TriangularMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/VectorwiseOp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'x' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 221,
                  "endLine": 221
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 289
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 291
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 293,
                  "endLine": 293
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the eighth argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the fifth argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the first argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the fourth argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the second argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the seventh argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the sixth argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the third argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the double type. Inspect the first argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 607
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the double type. Inspect the fourth argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 607
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the double type. Inspect the second argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 607
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the double type. Inspect the third argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 607
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'from' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'from' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'to' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'to' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const float& from' with 'float from'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const double& from' with 'double from'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const int& from' with 'int from'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const float& a' with 'float a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const double& a' with 'double a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const float& a' with 'float a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& a' with 'double a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const int& a' with 'int a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/AVX/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V673",
          "message": {
            "text": "The '(unsigned int)(15 - 127) << 23' expression evaluates to 36028796079439872. 55 bits are required to store the value, but the expression evaluates to the 'unsigned' type which can only hold '32' bits."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: x."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: float (a) == float (b). It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: float (a) != float (b). It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244
                }
              }
            }
          ]
        },
        {
          "ruleId": "V821",
          "message": {
            "text": "Decreased performance. The 'f32infty' variable can be constructed in a lower level scope."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. The 'f32infty' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 295,
                  "startLine": 295
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. The 'f32infty' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 310,
                  "startLine": 310
                }
              }
            }
          ]
        },
        {
          "ruleId": "V821",
          "message": {
            "text": "Decreased performance. The 'denorm_magic' variable can be constructed in a lower level scope."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. The 'denorm_magic' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 297,
                  "startLine": 297
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. The 'denorm_magic' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 313,
                  "startLine": 313
                }
              }
            }
          ]
        },
        {
          "ruleId": "V821",
          "message": {
            "text": "Decreased performance. The 'magic' variable can be constructed in a lower level scope."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 346,
                  "endLine": 346
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. The 'magic' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 346,
                  "startLine": 346
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. The 'magic' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/Half.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 357,
                  "startLine": 357
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 751,
                  "endLine": 751
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 767,
                  "endLine": 767
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 771,
                  "endLine": 771
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 784,
                  "endLine": 784
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 826,
                  "endLine": 826
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 828,
                  "endLine": 828
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 828,
                  "endLine": 828
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 835,
                  "endLine": 835
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 835,
                  "endLine": 835
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 849,
                  "endLine": 849
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 863,
                  "endLine": 863
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 869,
                  "endLine": 869
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 875,
                  "endLine": 875
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/PacketMathHalf.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 881,
                  "endLine": 881
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const float& a' with 'float a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/TypeCasting.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const int& a' with 'int a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/TypeCasting.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/CUDA/TypeCasting.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'predux_mul' function is fully equivalent to the body of 'predux' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 364,
                  "endLine": 364
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'predux_mul' function is fully equivalent to the body of 'predux' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 354,
                  "startLine": 354
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'predux_mul' function is fully equivalent to the body of 'predux' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 364,
                  "startLine": 364
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'pinsertlast' function is fully equivalent to the body of 'pinsertfirst' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 494,
                  "endLine": 494
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'pinsertlast' function is fully equivalent to the body of 'pinsertfirst' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 484,
                  "startLine": 484
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'pinsertlast' function is fully equivalent to the body of 'pinsertfirst' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 494,
                  "startLine": 494
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const  __m128& a' with ' __m128 a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 237,
                  "endLine": 237
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 246,
                  "endLine": 246
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const __m128d& a' with '__m128d a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 435,
                  "endLine": 435
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 438,
                  "endLine": 438
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 444,
                  "endLine": 444
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/Complex.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 447,
                  "endLine": 447
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 185
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 189
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 195
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 272
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 371,
                  "endLine": 371
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 373,
                  "endLine": 373
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 375,
                  "endLine": 375
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 376,
                  "endLine": 376
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'pset1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 378,
                  "endLine": 378
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'x' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 387
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 172
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 456,
                  "endLine": 456
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 479
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 484,
                  "endLine": 484
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 522,
                  "endLine": 522
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 530,
                  "endLine": 530
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const float& x' with 'float x'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 540,
                  "endLine": 540
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const double& x' with 'double x'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/MathFunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 547,
                  "endLine": 547
                }
              }
            }
          ]
        },
        {
          "ruleId": "V615",
          "message": {
            "text": "An odd explicit conversion from 'float *' type to 'double *' type."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the '_mm_load_sd' function will lead to overflow of the buffer 'from'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the first argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the fourth argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the second argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the float type. Inspect the third argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the double type. Inspect the first argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 812,
                  "endLine": 812
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The bool type is implicitly cast to the double type. Inspect the second argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 812,
                  "endLine": 812
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'from' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 308,
                  "endLine": 308
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'from' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'from' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'from' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 354,
                  "endLine": 354
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'to' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 360
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'to' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 364,
                  "endLine": 364
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const float& from' with 'float from'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const double& from' with 'double from'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const int& from' with 'int from'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 180
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const float& a' with 'float a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const double& a' with 'double a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 195
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const int& a' with 'int a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 216,
                  "endLine": 216
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 221,
                  "endLine": 221
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 283,
                  "endLine": 283
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 286,
                  "endLine": 286
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 291
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 291
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 292,
                  "endLine": 292
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 292,
                  "endLine": 292
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 300
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 300
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 358
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 360
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 362,
                  "endLine": 362
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 364,
                  "endLine": 364
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 386
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 391,
                  "endLine": 391
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const float& a' with 'float a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 400,
                  "endLine": 400
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const double& a' with 'double a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 406,
                  "endLine": 406
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 421,
                  "endLine": 421
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 422
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 423,
                  "endLine": 423
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 435,
                  "endLine": 435
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 437,
                  "endLine": 437
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 439,
                  "endLine": 439
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 442,
                  "endLine": 442
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 447,
                  "endLine": 447
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 452,
                  "endLine": 452
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 512,
                  "endLine": 512
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 518,
                  "endLine": 518
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 557,
                  "endLine": 557
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 586,
                  "endLine": 586
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 591,
                  "endLine": 591
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 595,
                  "endLine": 595
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 606,
                  "endLine": 606
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 611,
                  "endLine": 611
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 615,
                  "endLine": 615
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 632,
                  "endLine": 632
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 637,
                  "endLine": 637
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 641,
                  "endLine": 641
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 677,
                  "endLine": 677
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 687,
                  "endLine": 687
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 697,
                  "endLine": 697
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 790,
                  "endLine": 790
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 790,
                  "endLine": 790
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 800,
                  "endLine": 800
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 800,
                  "endLine": 800
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 810,
                  "endLine": 810
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 810,
                  "endLine": 810
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 821,
                  "endLine": 821
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 830,
                  "endLine": 830
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 839,
                  "endLine": 839
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 849,
                  "endLine": 849
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'vec2d_swizzle1' is a dangerous expression. The parameters 'p', 'q' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/arch/SSE/PacketMath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const bool& a' with 'bool a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 391,
                  "endLine": 391
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& b' with 'bool b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 391,
                  "endLine": 391
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const bool& a' with 'bool a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& b' with 'bool b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const bool& a' with 'bool a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 423,
                  "endLine": 423
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& b' with 'bool b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/BinaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 423,
                  "endLine": 423
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'scalar_constant_op' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/NullaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const bool& a' with 'bool a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/functors/UnaryFunctors.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 735,
                  "endLine": 735
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'loadRhsQuad' function is fully equivalent to the body of 'loadRhs' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 512,
                  "endLine": 512
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'loadRhsQuad' function is fully equivalent to the body of 'loadRhs' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 507,
                  "startLine": 507
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'loadRhsQuad' function is fully equivalent to the body of 'loadRhs' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 512,
                  "startLine": 512
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'loadLhsUnaligned' function is fully equivalent to the body of 'loadLhs' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 816,
                  "endLine": 816
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'loadLhsUnaligned' function is fully equivalent to the body of 'loadLhs' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 805,
                  "startLine": 805
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'loadLhsUnaligned' function is fully equivalent to the body of 'loadLhs' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 816,
                  "startLine": 816
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'p.first', 'p.second' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'pset1 < RealPacket > (RealScalar(0))' expression. Check lines: 638, 639."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 639,
                  "endLine": 639
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Variables 'p.first', 'p.second' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'pset1 < RealPacket > (RealScalar(0))' expression. Check lines: 638, 639."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 638,
                  "startLine": 638
                }
              }
            },
            {
              "message": {
                "text": "Variables 'p.first', 'p.second' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'pset1 < RealPacket > (RealScalar(0))' expression. Check lines: 638, 639."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 639,
                  "startLine": 639
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 542,
                  "endLine": 542
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 552,
                  "endLine": 552
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 826,
                  "endLine": 826
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/products/GeneralBlockPanelKernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 837,
                  "endLine": 837
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_VERSION_AT_LEAST' is a dangerous expression. The parameters 'x', 'y', 'z' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Macros.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_GNUC_AT_LEAST' is a dangerous expression. The parameters 'x', 'y' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Macros.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_GNUC_AT_MOST' is a dangerous expression. The parameters 'x', 'y' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Macros.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_GNUC_AT' is a dangerous expression. The parameters 'x', 'y' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Macros.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_SCALAR_BINARY_SUPPORTED' is a dangerous expression. The parameter 'TYPEA' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Macros.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 940,
                  "endLine": 940
                }
              }
            }
          ]
        },
        {
          "ruleId": "V701",
          "message": {
            "text": "realloc() possible leak: when realloc() fails in allocating memory, original pointer 'original' is lost. Consider assigning realloc() to a temporary pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 737,
                  "endLine": 737
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 829, 837"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 829,
                  "endLine": 829
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 829, 837"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 829,
                  "startLine": 829
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 829, 837"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 837,
                  "startLine": 837
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 834, 835, 839"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 834,
                  "endLine": 834
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 834, 835, 839"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 834,
                  "startLine": 834
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 834, 835, 839"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 835,
                  "startLine": 835
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 834, 835, 839"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 839,
                  "startLine": 839
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 843, 882"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 843,
                  "endLine": 843
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 843, 882"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 843,
                  "startLine": 843
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 843, 882"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 882,
                  "startLine": 882
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 844, 857, 883"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 844,
                  "endLine": 844
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 844, 857, 883"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 844,
                  "startLine": 844
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 844, 857, 883"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 857,
                  "startLine": 857
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 844, 857, 883"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 883,
                  "startLine": 883
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 856, 871, 879"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 856,
                  "endLine": 856
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 856, 871, 879"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 856,
                  "startLine": 856
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 856, 871, 879"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 871,
                  "startLine": 871
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 856, 871, 879"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 879,
                  "startLine": 879
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 858, 862, 884"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 858,
                  "endLine": 858
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 858, 862, 884"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 858,
                  "startLine": 858
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 858, 862, 884"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 862,
                  "startLine": 862
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 858, 862, 884"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 884,
                  "startLine": 884
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE' is a dangerous expression. The parameter 'SIZE' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/StaticAssert.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE' is a dangerous expression. The parameters 'ROWS', 'COLS' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/StaticAssert.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/XprHelper.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/Core/util/XprHelper.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'cols' function is fully equivalent to the body of 'rows' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'cols' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 55,
                  "startLine": 55
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'cols' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 56,
                  "startLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 190,
                  "endLine": 190
                }
              }
            }
          ]
        },
        {
          "ruleId": "V556",
          "message": {
            "text": "The values of different enum types are compared: UpLo == (Lower | Upper)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203
                }
              }
            }
          ]
        },
        {
          "ruleId": "V556",
          "message": {
            "text": "The values of different enum types are compared: UpLo == (Lower | Upper)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 193,
                  "endLine": 193
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_analysisIsOk."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'k' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fifth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the fourth argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: m_iterations, m_info."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 189
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/IterativeLinearSolvers/LeastSquareConjugateGradient.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1042",
          "message": {
            "text": "This file is marked with copyleft license, which requires you to open the derived source code."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/OrderingMethods/Amd.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'len'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/OrderingMethods/Amd.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'ROW_IS_MARKED_DEAD' is a dangerous expression. The parameter 'row_mark' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/OrderingMethods/Eigen_Colamd.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_factorizationIsOk, m_analysisIsOk."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'vectorD' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 444,
                  "endLine": 444
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'vectorD' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 543,
                  "endLine": 543
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'tags'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'y'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'tags'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'pattern'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'values'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'indices'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V575",
          "message": {
            "text": "The potential null pointer is passed into 'memset' function. Inspect the first argument."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'resCol' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'resRow' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/MappedSparseMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 39,
                  "startLine": 39
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 68,
                  "startLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 40,
                  "startLine": 40
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 69,
                  "startLine": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 266,
                  "startLine": 266
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 273,
                  "startLine": 273
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 267,
                  "startLine": 267
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 274,
                  "startLine": 274
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 430,
                  "endLine": 430
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 401,
                  "startLine": 401
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'blockRows' function is fully equivalent to the body of 'rows' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 430,
                  "startLine": 430
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 431,
                  "endLine": 431
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 402,
                  "startLine": 402
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'blockCols' function is fully equivalent to the body of 'cols' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseBlock.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 431,
                  "startLine": 431
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'operator Derived &' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 295, 296."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseCompressedBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'operator Derived &' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 295, 296."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseCompressedBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 295,
                  "startLine": 295
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'operator Derived &' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 295, 296."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseCompressedBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 296,
                  "startLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseCompressedBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_outerSize, m_innerSize."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 251
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'm_innerNonZeros'. Check lines: 498, 495."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 498,
                  "endLine": 498
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "There might be dereferencing of a potential null pointer 'm_innerNonZeros'. Check lines: 498, 495."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 495,
                  "startLine": 495
                }
              }
            },
            {
              "message": {
                "text": "There might be dereferencing of a potential null pointer 'm_innerNonZeros'. Check lines: 498, 495."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 498,
                  "startLine": 498
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 904,
                  "endLine": 904
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 904,
                  "endLine": 904
                }
              }
            }
          ]
        },
        {
          "ruleId": "V556",
          "message": {
            "text": "The values of different enum types are compared: SrcStorageOrder == RowMajor."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparsePermutation.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_object_bytes."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseRef.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 193,
                  "endLine": 193
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_object_bytes."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseRef.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 311,
                  "endLine": 311
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'SparseSelfAdjointView' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseSelfAdjointView.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseSolverBase.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_matrix."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 423,
                  "endLine": 423
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'insertBackUnordered' function is fully equivalent to the body of 'insertBack' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'insertBackUnordered' function is fully equivalent to the body of 'insertBack' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 154,
                  "startLine": 154
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'insertBackUnordered' function is fully equivalent to the body of 'insertBack' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 166,
                  "startLine": 166
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'operator SparseVectorType &' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 434, 435."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 435,
                  "endLine": 435
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'operator SparseVectorType &' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 434, 435."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 434,
                  "startLine": 434
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'operator SparseVectorType &' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 434, 435."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 435,
                  "startLine": 435
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseCore/SparseVector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: m_factorizationIsOk, m_analysisIsOk, m_glu, m_nnzL, m_nnzU, m_detPermC."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'SparseLU' constructor contains potentially uninitialized members. Inspect the following: m_detPermC, m_nnzL, m_nnzU."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'SparseLU' constructor contains potentially uninitialized members. Inspect the following: m_detPermC, m_nnzL, m_nnzU."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 104,
                  "startLine": 104
                }
              }
            },
            {
              "message": {
                "text": "The 'SparseLU' constructor contains potentially uninitialized members. Inspect the following: m_detPermC, m_nnzL, m_nnzU."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 687,
                  "startLine": 687
                }
              }
            },
            {
              "message": {
                "text": "The 'SparseLU' constructor contains potentially uninitialized members. Inspect the following: m_detPermC, m_nnzL, m_nnzU."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 690,
                  "startLine": 690
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'outerIndexPtr'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 437,
                  "endLine": 437
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The copy constructor is declared as private in the 'SparseLU' class, but the default copy assignment operator will still be generated by compiler. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'm_lastError(\"\")' with 'm_lastError()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'm_lastError(\"\")' with 'm_lastError()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ]
        },
        {
          "ruleId": "V669",
          "message": {
            "text": "The 'm', 'w', 't', 'b' arguments are non-constant references. The analyzer is unable to determine the position at which this argument is being modified. It is possible that the function contains an error."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_row, m_col, m_nsuper, m_nzval, m_nzval_colptr, m_rowind, ..."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "V592",
          "message": {
            "text": "The expression was enclosed by parentheses twice: '((nextl - jptr != jptr - jm1ptr - 1))'. One pair of parentheses is unnecessary or misprint is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_column_dfs.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136
                }
              }
            }
          ]
        },
        {
          "ruleId": "V592",
          "message": {
            "text": "The expression was enclosed by parentheses twice: '((A0 + i + (5) * PacketSize))'. One pair of parentheses is unnecessary or misprint is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_gemm_kernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ]
        },
        {
          "ruleId": "V592",
          "message": {
            "text": "The expression was enclosed by parentheses twice: '((A1 + i + (5) * PacketSize))'. One pair of parentheses is unnecessary or misprint is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_gemm_kernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131
                }
              }
            }
          ]
        },
        {
          "ruleId": "V592",
          "message": {
            "text": "The expression was enclosed by parentheses twice: '((A2 + i + (5) * PacketSize))'. One pair of parentheses is unnecessary or misprint is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_gemm_kernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132
                }
              }
            }
          ]
        },
        {
          "ruleId": "V592",
          "message": {
            "text": "The expression was enclosed by parentheses twice: '((A3 + i + (5) * PacketSize))'. One pair of parentheses is unnecessary or misprint is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseLU/SparseLU_gemm_kernel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_factorizationIsok, m_nonzeropivots."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'tau' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 625, 626."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 626,
                  "endLine": 626
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'tau' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 625, 626."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 625,
                  "startLine": 625
                }
              }
            },
            {
              "message": {
                "text": "The 'tau' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 625, 626."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 626,
                  "startLine": 626
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'tau' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 641, 642."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 642,
                  "endLine": 642
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'tau' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 641, 642."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 641,
                  "startLine": 641
                }
              }
            },
            {
              "message": {
                "text": "The 'tau' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 641, 642."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 642,
                  "startLine": 642
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'SparseQR' constructor contains potentially uninitialized members. Inspect the following: m_nonzeropivots, m_factorizationIsok."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'SparseQR' constructor contains potentially uninitialized members. Inspect the following: m_nonzeropivots, m_factorizationIsok."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 103,
                  "startLine": 103
                }
              }
            },
            {
              "message": {
                "text": "The 'SparseQR' constructor contains potentially uninitialized members. Inspect the following: m_nonzeropivots, m_factorizationIsok."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 582,
                  "startLine": 582
                }
              }
            },
            {
              "message": {
                "text": "The 'SparseQR' constructor contains potentially uninitialized members. Inspect the following: m_nonzeropivots, m_factorizationIsok."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 595,
                  "startLine": 595
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'adjoint' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 678,
                  "endLine": 678
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'adjoint' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 671,
                  "startLine": 671
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'transpose' function is fully equivalent to the body of 'adjoint' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 678,
                  "startLine": 678
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'm_lastError(\"\")' with 'm_lastError()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'm_lastError(\"\")' with 'm_lastError()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'mQrm' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/Eigen/src/SparseQR/SparseQR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/JsonCpp/json/json.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1793,
                  "endLine": 1793
                }
              }
            }
          ]
        },
        {
          "ruleId": "V575",
          "message": {
            "text": "The 'realloc' function processes '0' elements. Inspect the second argument."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "V773",
          "message": {
            "text": "Visibility scope of the 'ret' pointer was exited without releasing the memory. A memory leak is possible."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Visibility scope of the 'ret' pointer was exited without releasing the memory. A memory leak is possible."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 51,
                  "startLine": 51
                }
              }
            },
            {
              "message": {
                "text": "Visibility scope of the 'ret' pointer was exited without releasing the memory. A memory leak is possible."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 55,
                  "startLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: offset < pos1."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'ByteBuffer' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ]
        },
        {
          "ruleId": "V701",
          "message": {
            "text": "realloc() possible leak: when realloc() fails in allocating memory, original pointer 'mpch' is lost. Consider assigning realloc() to a temporary pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ByteBuffer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the second function argument as a reference. Consider replacing 'const .. endpoint' with 'const .. &endpoint'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Exception.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. typeidName' with 'const .. &typeidName'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Exception.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 497
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Error' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Exception.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "V516",
          "message": {
            "text": "Consider inspecting an odd expression. Non-null function pointer is compared to null: 'ExplicitOutParameter::value'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1318,
                  "endLine": 1318
                }
              }
            }
          ]
        },
        {
          "ruleId": "V516",
          "message": {
            "text": "Consider inspecting an odd expression. Non-null function pointer is compared to null: 'NonConstRef_::value'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1318,
                  "endLine": 1318
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1053",
          "message": {
            "text": "Calling the 'read' virtual function in the constructor may lead to unexpected result at runtime."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1632,
                  "endLine": 1632
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression '!pt' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 609,
                  "endLine": 609
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression '!pt' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 703,
                  "endLine": 703
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'ver >= 9' is always true."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 592,
                  "endLine": 592
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'ver >= 9' is always true."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 686,
                  "endLine": 686
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'ver >= 9' is always true."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1011,
                  "endLine": 1011
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'ver >= 9' is always true."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1061,
                  "endLine": 1061
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Future' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1751,
                  "endLine": 1751
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 329,
                  "endLine": 329
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 441,
                  "endLine": 441
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 463,
                  "endLine": 463
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 470,
                  "endLine": 470
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 475,
                  "endLine": 475
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 480,
                  "endLine": 480
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 485,
                  "endLine": 485
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 521,
                  "endLine": 521
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 626,
                  "endLine": 626
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 720,
                  "endLine": 720
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 772,
                  "endLine": 772
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 834,
                  "endLine": 834
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 890,
                  "endLine": 890
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1103,
                  "endLine": 1103
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1677,
                  "endLine": 1677
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1865,
                  "endLine": 1865
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 457,
                  "endLine": 457
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 468,
                  "endLine": 468
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Marshal.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 473,
                  "endLine": 473
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/MethodInvocation.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ObjectPool.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'CbAllocatorBase' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ObjectPool.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ObjectPool.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ObjectPool.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ObjectPool.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ObjectPool.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 286,
                  "endLine": 286
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'customizationCallback' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Protocol/Protocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'customizationCallback' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Protocol/Protocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'customizationCallback' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Protocol/Protocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'customizationCallback' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Protocol/Protocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 343,
                  "endLine": 343
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 352,
                  "endLine": 352
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 358
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 366,
                  "endLine": 366
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 370,
                  "endLine": 370
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 375,
                  "endLine": 375
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 389,
                  "endLine": 389
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 398,
                  "endLine": 398
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 412,
                  "endLine": 412
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 416,
                  "endLine": 416
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 421,
                  "endLine": 421
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 427,
                  "endLine": 427
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 359,
                  "startLine": 359
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 360,
                  "startLine": 360
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 361,
                  "startLine": 361
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 382,
                  "endLine": 382
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 382,
                  "startLine": 382
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 383,
                  "startLine": 383
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 384,
                  "startLine": 384
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 405,
                  "endLine": 405
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 405,
                  "startLine": 405
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 406,
                  "startLine": 406
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 407,
                  "startLine": 407
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 428,
                  "startLine": 428
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 429,
                  "startLine": 429
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'rcfClientPtr->getServerStub()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 430,
                  "startLine": 430
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'name_ == \"\"' with 'name_.empty()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 532,
                  "endLine": 532
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const auto_ptr < ImplementationT >& t' with 'auto_ptr < ImplementationT > t'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 411,
                  "endLine": 411
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the third argument 'const auto_ptr < ImplementationT >& t' with 'auto_ptr < ImplementationT > t'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 415,
                  "endLine": 415
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the fourth argument 'const auto_ptr < ImplementationT >& t' with 'auto_ptr < ImplementationT > t'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 420,
                  "endLine": 420
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the fifth argument 'const auto_ptr < ImplementationT >& t' with 'auto_ptr < ImplementationT > t'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RcfServer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 426,
                  "endLine": 426
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1044",
          "message": {
            "text": "Loop break conditions do not depend on the number of iterations."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/RecursionLimiter.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/SerializationProtocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/SerializationProtocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/SerializationProtocol.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ServerStub.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ServerStub.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ServerStub.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 507,
                  "endLine": 507
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ServerStub.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 508,
                  "endLine": 508
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ServerStub.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const auto_ptr < T >& tAutoPtr' with 'auto_ptr < T > tAutoPtr'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/ServerStub.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1061",
          "message": {
            "text": "Extending the 'std' namespace may result in undefined behavior."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Tools.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'd' std::deque with std::vector. Contiguous placement of elements in memory can be more efficient."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/Tools.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1040",
          "message": {
            "text": "Possible typo in the spelling of a pre-defined macro name. The 'WINRT' macro is similar to 'WINNT'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Assert.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1040",
          "message": {
            "text": "Possible typo in the spelling of a pre-defined macro name. The 'WINRT' macro is similar to 'WINNT'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Assert.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Assert.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'first' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/InitDeinit.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'initCallbacks' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/InitDeinit.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'initCallbacksInvoked' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/InitDeinit.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'first' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/InitDeinit.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'deinitCallbacks' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/InitDeinit.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Log.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'LogToFile' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Log.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Log.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Tchar.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'ws' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Tchar.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Tchar.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Tchar.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1090",
          "message": {
            "text": "The 'std::uncaught_exception' function is deprecated since C++17 and is removed in C++20. Consider replacing this function with 'std::uncaught_exceptions'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Throw.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/RCF/util/Throw.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 185
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1042",
          "message": {
            "text": "This file is marked with copyleft license, which requires you to open the derived source code."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Archive.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'typeRtti' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Registry.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Registry.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 264
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/SerializePolymorphic.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Serializer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Serializer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 427,
                  "endLine": 427
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Serializer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 439,
                  "endLine": 439
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/Serializer.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 446,
                  "endLine": 446
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1061",
          "message": {
            "text": "Extending the 'std' namespace may result in undefined behavior."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/shared_ptr.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1048",
          "message": {
            "text": "The 'encodingType' variable was assigned the same value."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/string.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/string.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/string.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/RCF/include/SF/string.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 148
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1042",
          "message": {
            "text": "This file is marked with copyleft license, which requires you to open the derived source code."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/ExternTools/V2449/jupiterfilecache/include/filecache.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/Client/ps7ProtectConfigExtended.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/Common/ps7ProtectionConfigProxy.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V776",
          "message": {
            "text": "Potentially infinite loop."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'std::string(\"A2iAProtectAccess\") == \"\"' with 'std::string(\"A2iAProtectAccess\").empty()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'std::string(\"A2iAProtectProductAccess\") == \"\"' with 'std::string(\"A2iAProtectProductAccess\").empty()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'std::string(\"A2iAProtectConfig\") == \"\"' with 'std::string(\"A2iAProtectConfig\").empty()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/ProtectSent7/Product/RCFInterface/ps7ProtectService.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/Protect/Protect_Pwd/Password.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 330
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'm_sep = \"\"' with 'm_sep.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/Protect/Protect_Pwd/Password.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum ps7AuthorizationFlags& flags' with 'enum ps7AuthorizationFlags flags'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/Protect/Protect_Pwd/Password.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum ps7AuthorizationFlags& flags' with 'enum ps7AuthorizationFlags flags'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Protect/V2449/Protect/Protect_Pwd/Protect_Pwd.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QAbstractState' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qabstractstate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QAbstractTransition' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qabstracttransition.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'cloneFlags' function is fully equivalent to the body of 'detachFlags' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qarraydata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'cloneFlags' function is fully equivalent to the body of 'detachFlags' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qarraydata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 99,
                  "startLine": 99
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'cloneFlags' function is fully equivalent to the body of 'detachFlags' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qarraydata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 107,
                  "startLine": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: n."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qarraydataops.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 352,
                  "endLine": 352
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbitarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QBitRef' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbitarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 699,
                  "endLine": 699
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 701,
                  "endLine": 701
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 703,
                  "endLine": 703
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 705,
                  "endLine": 705
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 707,
                  "endLine": 707
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'QByteArray::begin' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 610, 612."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 612,
                  "endLine": 612
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'QByteArray::begin' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 610, 612."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 610,
                  "startLine": 610
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'QByteArray::begin' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 610, 612."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 612,
                  "startLine": 612
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'QByteArray::end' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 618, 620."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 620,
                  "endLine": 620
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'QByteArray::end' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 618, 620."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 618,
                  "startLine": 618
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'QByteArray::end' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 618, 620."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 620,
                  "startLine": 620
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QByteRef' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qbytearray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 547,
                  "endLine": 547
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: t, c, p, n."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator *' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 189
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'j' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'j' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'it' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Iterator' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'ConstIterator' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'value' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator []' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 296, 297."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 296, 297."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 296,
                  "startLine": 296
                }
              }
            },
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 296, 297."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 297,
                  "startLine": 297
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 302, 303."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 302, 303."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 302,
                  "startLine": 302
                }
              }
            },
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 302, 303."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 303,
                  "startLine": 303
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 308, 309."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 308, 309."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 308,
                  "startLine": 308
                }
              }
            },
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 308, 309."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 309,
                  "startLine": 309
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 314, 315."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 314, 315."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 314,
                  "startLine": 314
                }
              }
            },
            {
              "message": {
                "text": "The 'v' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 314, 315."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 315,
                  "startLine": 315
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'j' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'j' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'it' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'it' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Iterator' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'ConstIterator' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'v' argument should probably be rendered as a constant reference."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcbormap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 318,
                  "endLine": 318
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The 'value64 - int (QCborSimpleType::False)' value is implicitly cast to the bool type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborstream.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborvalue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QCborValueRef' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborvalue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 330
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1016",
          "message": {
            "text": "The value '-1' is out of range of enum values. This causes unspecified or undefined behavior."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborvalue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1016",
          "message": {
            "text": "The value '-1' is out of range of enum values. This causes unspecified or undefined behavior."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcborvalue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 372,
                  "endLine": 372
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's1', 's2' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcollator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QCollatorSortKey' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcollator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QCommandLineOption' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcommandlineoption.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1059",
          "message": {
            "text": "Macro name overrides the 'for' keyword. This may lead to undefined behavior."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcompilerdetection.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1315,
                  "endLine": 1315
                }
              }
            }
          ]
        },
        {
          "ruleId": "V678",
          "message": {
            "text": "An object is used as an argument to its own method. Consider checking the first actual argument of the 'freeData' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 338,
                  "endLine": 338
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QContiguousCache' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'd->count == d->alloc' is always true."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 378,
                  "endLine": 378
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'first' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 139, 141."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'first' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 139, 141."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 139,
                  "startLine": 139
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'first' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 139, 141."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 141,
                  "startLine": 141
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'last' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 140, 142."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 142,
                  "endLine": 142
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'last' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 140, 142."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 140,
                  "startLine": 140
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'last' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 140, 142."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcontiguouscache.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 142,
                  "startLine": 142
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QCoreApplication' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qcoreapplication.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "V602",
          "message": {
            "text": "Consider inspecting the 'sizeof (ShortData) * 8 > 50' expression. '>' possibly should be replaced with '>>'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qdatetime.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Data' class implements a move constructor, but lacks the move assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qdatetime.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qdebug.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'm' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qdebug.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 80 to 72 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qdebug.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QDir' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qdir.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QFileInfo' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfileinfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QFinalState' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfinalstate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: lhs != static_cast<long double> (rhs). It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: lhs == static_cast<long double> (rhs). It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<long double> (lhs) != rhs. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<long double> (lhs) == rhs. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: lhs != static_cast<double> (rhs). It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: lhs == static_cast<double> (rhs). It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<double> (lhs) != rhs. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<double> (lhs) == rhs. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: lhs != static_cast<float> (rhs). It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: lhs == static_cast<float> (rhs). It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<float> (lhs) != rhs. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<float> (lhs) == rhs. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: a == static_cast<float> (b). It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<float> (a) == b. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: a != static_cast<float> (b). It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: static_cast<float> (a) != b. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfloat16.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfuture.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: future, index."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qfuture.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1042",
          "message": {
            "text": "This file is marked with copyleft license, which requires you to open the derived source code."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qglobal.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: d == 0.0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qglobal.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 917,
                  "endLine": 917
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: f == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qglobal.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 922,
                  "endLine": 922
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1059",
          "message": {
            "text": "Macro name overrides the 'dynamic_cast' keyword. This may lead to undefined behavior."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qglobal.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1187,
                  "endLine": 1187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constKeyValueBegin' function is fully equivalent to the body of 'keyValueBegin' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueBegin' function is fully equivalent to the body of 'keyValueBegin' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 486,
                  "startLine": 486
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueBegin' function is fully equivalent to the body of 'keyValueBegin' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 487,
                  "startLine": 487
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constKeyValueEnd' function is fully equivalent to the body of 'keyValueEnd' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 489,
                  "endLine": 489
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueEnd' function is fully equivalent to the body of 'keyValueEnd' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 488,
                  "startLine": 488
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueEnd' function is fully equivalent to the body of 'keyValueEnd' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 489,
                  "startLine": 489
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constFind' function is fully equivalent to the body of 'find' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 909,
                  "endLine": 909
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constFind' function is fully equivalent to the body of 'find' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 903,
                  "startLine": 903
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constFind' function is fully equivalent to the body of 'find' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 909,
                  "startLine": 909
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of QHashNode < double, QHashDummyValue >: An odd precise comparison: key0 == key. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ]
        },
        {
          "ruleId": "V565",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'i', 'n' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'c.constEnd()' expression."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1148,
                  "endLine": 1148
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'i', 'n' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'c->end()' expression."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1149,
                  "endLine": 1149
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1027,
                  "endLine": 1027
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1020",
          "message": {
            "text": "The function exited without calling the 'c.constEnd' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhash.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1148,
                  "endLine": 1148
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QHistoryState' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qhistorystate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'const_iterator' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qjsonarray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'key' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qjsonobject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'key' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qjsonobject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QJsonValueRef' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qjsonvalue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qline.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qline.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 289
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: n, p."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlinkedlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'list' std::list with std::vector. Contiguous placement of elements in memory can be more efficient."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlinkedlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'front' function is fully equivalent to the body of 'constFirst' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 380,
                  "endLine": 380
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'front' function is fully equivalent to the body of 'constFirst' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 362,
                  "startLine": 362
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'front' function is fully equivalent to the body of 'constFirst' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 380,
                  "startLine": 380
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'back' function is fully equivalent to the body of 'constLast' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 382,
                  "endLine": 382
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'back' function is fully equivalent to the body of 'constLast' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 366,
                  "startLine": 366
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'back' function is fully equivalent to the body of 'constLast' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 382,
                  "startLine": 382
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of QList < qreal >: An odd precise comparison: first() == t. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 369
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of QList < qreal >: An odd precise comparison: last() == t. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 370,
                  "endLine": 370
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'first' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 361, 363."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'first' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 361, 363."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 361,
                  "startLine": 361
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'first' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 361, 363."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 363,
                  "startLine": 363
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'last' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 364, 365."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 365,
                  "endLine": 365
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'last' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 364, 365."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 364,
                  "startLine": 364
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'last' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 364, 365."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 365,
                  "startLine": 365
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QLocale' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qlocale.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V717",
          "message": {
            "text": "It is suspicious to cast object of base class 'QMapNodeBase' to derived class 'QMapNode'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ]
        },
        {
          "ruleId": "V717",
          "message": {
            "text": "It is suspicious to cast object of base class 'QMapNodeBase' to derived class 'QMapNode'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'map' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1174,
                  "endLine": 1174
                }
              }
            }
          ]
        },
        {
          "ruleId": "V717",
          "message": {
            "text": "It is suspicious to cast object of base class 'QMapDataBase' to derived class 'QMapData'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ]
        },
        {
          "ruleId": "V717",
          "message": {
            "text": "It is suspicious to cast object of base class 'QMapDataBase' to derived class 'QMapData'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 327,
                  "endLine": 327
                }
              }
            }
          ]
        },
        {
          "ruleId": "V717",
          "message": {
            "text": "It is suspicious to cast object of base class 'QMapDataBase' to derived class 'QMapData'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 340,
                  "endLine": 340
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1071",
          "message": {
            "text": "Consider inspecting the 'createNode' function. The return value is not always used. Total calls: 12, discarded results: 1."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider inspecting the 'createNode' function. The return value is not always used. Total calls: 12, discarded results: 1."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 220,
                  "startLine": 220
                }
              }
            },
            {
              "message": {
                "text": "Consider inspecting the 'createNode' function. The return value is not always used. Total calls: 12, discarded results: 1."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1163,
                  "startLine": 1163
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constKeyValueBegin' function is fully equivalent to the body of 'keyValueBegin' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 563,
                  "endLine": 563
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueBegin' function is fully equivalent to the body of 'keyValueBegin' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 562,
                  "startLine": 562
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueBegin' function is fully equivalent to the body of 'keyValueBegin' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 563,
                  "startLine": 563
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constKeyValueEnd' function is fully equivalent to the body of 'keyValueEnd' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 565,
                  "endLine": 565
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueEnd' function is fully equivalent to the body of 'keyValueEnd' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 564,
                  "startLine": 564
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constKeyValueEnd' function is fully equivalent to the body of 'keyValueEnd' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 565,
                  "startLine": 565
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'i', 'n' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'c.constEnd()' expression."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1281,
                  "endLine": 1281
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'i', 'n' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'c->end()' expression."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1282,
                  "endLine": 1282
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1183,
                  "endLine": 1183
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1020",
          "message": {
            "text": "The function exited without calling the 'c.constEnd' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1281,
                  "endLine": 1281
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 24 to 16 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmetatype.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 843,
                  "endLine": 843
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1071",
          "message": {
            "text": "Consider inspecting the 'qRegisterMetaType' function. The return value is not always used. Total calls: 31, discarded results: 1."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmetatype.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1850,
                  "endLine": 1850
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider inspecting the 'qRegisterMetaType' function. The return value is not always used. Total calls: 31, discarded results: 1."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmetatype.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1850,
                  "startLine": 1850
                }
              }
            },
            {
              "message": {
                "text": "Consider inspecting the 'qRegisterMetaType' function. The return value is not always used. Total calls: 31, discarded results: 1."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmetatype.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1873,
                  "startLine": 1873
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 't' std::list with std::vector. Contiguous placement of elements in memory can be more efficient."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmetatype.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1037,
                  "endLine": 1037
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QMimeData' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmimedata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QMimeType' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qmimetype.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QObjectCleanupHandler' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qobjectcleanuphandler.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qobjectdefs_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 400,
                  "endLine": 400
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'data()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qpointer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QProcessEnvironment' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qprocess.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: h == 0.. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qrect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 671,
                  "endLine": 671
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0.. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qrect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 671,
                  "endLine": 671
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QRegExp' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qregexp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QRegularExpression' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qregularexpression.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QRegularExpressionMatch' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qregularexpression.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QRegularExpressionMatchIterator' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qregularexpression.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V572",
          "message": {
            "text": "It is odd that the object which was created using 'new' operator is immediately cast to another type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qresultstore.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 148
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (pointer)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qscopedpointer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QScopeGuard' class implements a move constructor, but lacks the move assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qscopeguard.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of '|=' function is fully equivalent to the body of '<<' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 231
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of '|=' function is fully equivalent to the body of '<<' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 229,
                  "startLine": 229
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of '|=' function is fully equivalent to the body of '<<' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 231,
                  "startLine": 231
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qset.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'operator *' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 79, 80."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qshareddata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'operator *' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 79, 80."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qshareddata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 79,
                  "startLine": 79
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'operator *' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 79, 80."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qshareddata.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 80,
                  "startLine": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1062",
          "message": {
            "text": "The 'ExternalRefCountData' class defines a custom 'delete' operator. The 'new' operator must also be defined."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsharedpointer_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'ExternalRefCountData' class defines a custom 'delete' operator. The 'new' operator must also be defined."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsharedpointer_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 132,
                  "startLine": 132
                }
              }
            },
            {
              "message": {
                "text": "The 'ExternalRefCountData' class defines a custom 'delete' operator. The 'new' operator must also be defined."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsharedpointer_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 159,
                  "startLine": 159
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: destroyer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsharedpointer_impl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'm' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsize.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'm' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsize.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QStorageInfo' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstorageinfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1019,
                  "endLine": 1019
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1582,
                  "endLine": 1582
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1481,
                  "endLine": 1481
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1483,
                  "endLine": 1483
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1485,
                  "endLine": 1485
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1488,
                  "endLine": 1488
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1490,
                  "endLine": 1490
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1492,
                  "endLine": 1492
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1494,
                  "endLine": 1494
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1496,
                  "endLine": 1496
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'operator +' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1498,
                  "endLine": 1498
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'toUcs4_helper' function will lead to overflow of the buffer 'array'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1128,
                  "endLine": 1128
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'fromUcs4' function will lead to overflow of the buffer 'string'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1137,
                  "endLine": 1137
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 146
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 469,
                  "endLine": 469
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 478,
                  "endLine": 478
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1322,
                  "endLine": 1322
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1595,
                  "endLine": 1595
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1605,
                  "endLine": 1605
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1647,
                  "endLine": 1647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1656,
                  "endLine": 1656
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1792,
                  "endLine": 1792
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs', 'rhs' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1882,
                  "endLine": 1882
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs', 'rhs' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1883,
                  "endLine": 1883
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs', 'rhs' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1884,
                  "endLine": 1884
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs', 'rhs' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1885,
                  "endLine": 1885
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs', 'rhs' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1886,
                  "endLine": 1886
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs', 'rhs' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1887,
                  "endLine": 1887
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1890,
                  "endLine": 1890
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1891,
                  "endLine": 1891
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1892,
                  "endLine": 1892
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1893,
                  "endLine": 1893
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1894,
                  "endLine": 1894
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1895,
                  "endLine": 1895
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1897,
                  "endLine": 1897
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1898,
                  "endLine": 1898
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1899,
                  "endLine": 1899
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1900,
                  "endLine": 1900
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1901,
                  "endLine": 1901
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1902,
                  "endLine": 1902
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1905,
                  "endLine": 1905
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1906,
                  "endLine": 1906
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1907,
                  "endLine": 1907
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1908,
                  "endLine": 1908
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1909,
                  "endLine": 1909
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'lhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1910,
                  "endLine": 1910
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1912,
                  "endLine": 1912
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1913,
                  "endLine": 1913
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1914,
                  "endLine": 1914
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1915,
                  "endLine": 1915
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1916,
                  "endLine": 1916
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'rhs' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1917,
                  "endLine": 1917
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1986,
                  "endLine": 1986
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2056,
                  "endLine": 2056
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'array' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1128,
                  "endLine": 1128
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1032",
          "message": {
            "text": "The pointer 'string' is cast to a more strictly aligned pointer type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1137,
                  "endLine": 1137
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'QString::begin' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1296, 1298."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1298,
                  "endLine": 1298
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'QString::begin' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1296, 1298."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1296,
                  "startLine": 1296
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'QString::begin' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1296, 1298."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1298,
                  "startLine": 1298
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'QString::end' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1304, 1306."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1306,
                  "endLine": 1306
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'QString::end' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1304, 1306."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1304,
                  "startLine": 1304
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'QString::end' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1304, 1306."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1306,
                  "startLine": 1306
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QCharRef' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1140,
                  "endLine": 1140
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 914,
                  "endLine": 914
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 915,
                  "endLine": 915
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const QChar& c' with 'QChar c'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstring.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2057,
                  "endLine": 2057
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. ' with 'const .. &'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringbuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. c' with 'const .. &c'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringbuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. c' with 'const .. &c'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringbuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 210
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. a' with 'const .. &a'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringbuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. a' with 'const .. &a'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringbuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. a' with 'const .. &a'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringbuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'sep' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 233
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'str' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'str' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 272
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'before', 'after' arguments should probably be rendered as constant references."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'before' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'after' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringlist.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V717",
          "message": {
            "text": "It is suspicious to cast object of base class 'QArrayData' to derived class 'QTypedArrayData'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringliteral.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 224,
                  "endLine": 224
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 313,
                  "endLine": 313
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 314,
                  "endLine": 314
                }
              }
            }
          ]
        },
        {
          "ruleId": "V685",
          "message": {
            "text": "Consider inspecting the return statement. The expression contains a comma."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 322,
                  "endLine": 322
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'other' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 's' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qstringview.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 291
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'Q_MV_OSX' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsysinfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'Q_MV_IOS' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsysinfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'Q_MV_TVOS' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsysinfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'Q_MV_WATCHOS' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qsysinfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 142,
                  "endLine": 142
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qthreadstorage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QTimeZone' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qtimezone.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QUrlQuery' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qurlquery.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/quuid.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/quuid.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/quuid.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/quuid.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: data."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvariant.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 400,
                  "endLine": 400
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'k' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvariant.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 655,
                  "endLine": 655
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'k' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvariant.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 713,
                  "endLine": 713
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Private' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvariant.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 394,
                  "endLine": 394
                }
              }
            }
          ]
        },
        {
          "ruleId": "V769",
          "message": {
            "text": "The 'ptr' pointer in the 'ptr + s' expression could be nullptr. In such case, resulting value will be senseless and it should not be used. Check lines: 399, 385."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvarlengtharray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 399
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'ptr' pointer in the 'ptr + s' expression could be nullptr. In such case, resulting value will be senseless and it should not be used. Check lines: 399, 385."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvarlengtharray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 385,
                  "startLine": 385
                }
              }
            },
            {
              "message": {
                "text": "The 'ptr' pointer in the 'ptr + s' expression could be nullptr. In such case, resulting value will be senseless and it should not be used. Check lines: 399, 385."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvarlengtharray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 399,
                  "startLine": 399
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvarlengtharray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constFirst' function is fully equivalent to the body of 'first' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constFirst' function is fully equivalent to the body of 'first' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 243,
                  "startLine": 243
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constFirst' function is fully equivalent to the body of 'first' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 244,
                  "startLine": 244
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'constLast' function is fully equivalent to the body of 'last' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'constLast' function is fully equivalent to the body of 'last' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 246,
                  "startLine": 246
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'constLast' function is fully equivalent to the body of 'last' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 247,
                  "startLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of QVector < qreal >: An odd precise comparison: first() == t. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of QVector < qreal >: An odd precise comparison: last() == t. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qvector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ]
        },
        {
          "ruleId": "V794",
          "message": {
            "text": "The assignment operator should be protected from the case of 'this == &other'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qversionnumber.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qxmlstream.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtCore/qxmlstream.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QBrush' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qbrush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QInputMethodEvent' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qevent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 566,
                  "endLine": 566
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QFont' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qfont.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QFontMetrics' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qfontmetrics.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QFontMetricsF' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qfontmetrics.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qgenericmatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QGlyphRun' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qglyphrun.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QGuiApplication' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qguiapplication.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'convertToFormat' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 183, 185."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 185
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'convertToFormat' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 183, 185."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 183,
                  "startLine": 183
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'convertToFormat' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 183, 185."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 185,
                  "startLine": 185
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'mirrored' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 288, 290."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'mirrored' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 288, 290."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 288,
                  "startLine": 288
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'mirrored' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 288, 290."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 290,
                  "startLine": 290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'rgbSwapped' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 292, 294."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'rgbSwapped' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 292, 294."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 292,
                  "startLine": 292
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'rgbSwapped' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 292, 294."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qimage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 294,
                  "startLine": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QInputMethod' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qinputmethod.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QKeySequence' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qkeysequence.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: _m11, _m12, _m21, _m22, _dx, _dy."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][3] == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][3] == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][3] == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][3] == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][0] != 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][1] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][2] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][3] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 330
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][0] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 330
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][1] != 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 330
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][2] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 332,
                  "endLine": 332
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][3] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 332,
                  "endLine": 332
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][0] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 332,
                  "endLine": 332
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][1] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][2] != 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][3] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][0] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 336,
                  "endLine": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][1] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 336,
                  "endLine": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][2] != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 336,
                  "endLine": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][3] == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 338,
                  "endLine": 338
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][0] == other.m[0][0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 550,
                  "endLine": 550
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][1] == other.m[0][1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 551,
                  "endLine": 551
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][2] == other.m[0][2]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 552,
                  "endLine": 552
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][3] == other.m[0][3]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 553,
                  "endLine": 553
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][0] == other.m[1][0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 554,
                  "endLine": 554
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][1] == other.m[1][1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 555,
                  "endLine": 555
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][2] == other.m[1][2]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 556,
                  "endLine": 556
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][3] == other.m[1][3]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 557,
                  "endLine": 557
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][0] == other.m[2][0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 558,
                  "endLine": 558
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][1] == other.m[2][1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 559,
                  "endLine": 559
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][2] == other.m[2][2]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 560,
                  "endLine": 560
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][3] == other.m[2][3]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 561,
                  "endLine": 561
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][0] == other.m[3][0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 562,
                  "endLine": 562
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][1] == other.m[3][1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 563,
                  "endLine": 563
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][2] == other.m[3][2]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 564,
                  "endLine": 564
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][3] == other.m[3][3]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 565,
                  "endLine": 565
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][0] != other.m[0][0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 570,
                  "endLine": 570
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][1] != other.m[0][1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 571,
                  "endLine": 571
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][2] != other.m[0][2]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 572,
                  "endLine": 572
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[0][3] != other.m[0][3]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 573,
                  "endLine": 573
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][0] != other.m[1][0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 574,
                  "endLine": 574
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][1] != other.m[1][1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 575,
                  "endLine": 575
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][2] != other.m[1][2]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 576,
                  "endLine": 576
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[1][3] != other.m[1][3]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 577,
                  "endLine": 577
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][0] != other.m[2][0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 578,
                  "endLine": 578
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][1] != other.m[2][1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 579,
                  "endLine": 579
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][2] != other.m[2][2]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 580,
                  "endLine": 580
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[2][3] != other.m[2][3]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 581,
                  "endLine": 581
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][0] != other.m[3][0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 582,
                  "endLine": 582
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][1] != other.m[3][1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 583,
                  "endLine": 583
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][2] != other.m[3][2]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: m[3][3] != other.m[3][3]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 585,
                  "endLine": 585
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 743,
                  "endLine": 743
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 781,
                  "endLine": 781
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 853,
                  "endLine": 853
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 874,
                  "endLine": 874
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 906,
                  "endLine": 906
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 1.0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 940,
                  "endLine": 940
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'QMatrix4x4::operator ()' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 270, 276."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'QMatrix4x4::operator ()' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 270, 276."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 270,
                  "startLine": 270
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'QMatrix4x4::operator ()' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 270, 276."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qmatrix4x4.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 276,
                  "startLine": 276
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QOpenGLContextGroup' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qopenglcontext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QOpenGLDebugMessage' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qopengldebug.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qopenglextrafunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 289
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qopenglfunctions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QOpenGLPixelTransferOptions' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qopenglpixeltransferoptions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QPageLayout' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpagelayout.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QPageSize' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpagesize.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QPainterPath' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpainterpath.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QPicture' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpicture.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QPixmap' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpixmap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpolygon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpolygon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpolygon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qpolygon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: wp, xp, yp, zp."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: wp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: xp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: yp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: zp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: wp == 1.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: xp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: yp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: zp == 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: q1.wp == q2.wp. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: q1.xp == q2.xp. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: q1.yp == q2.yp. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: q1.zp == q2.zp. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qquaternion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QRawFont' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qrawfont.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QScreen' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qscreen.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QStaticText' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qstatictext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QStyleHints' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qstylehints.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'QTextCursor' class implements the move assignment operator, but lacks a move constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtextcursor.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'iterator' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtextobject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: fragment."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtexttable.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtexttable.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: m_13, m_23, m_33, m_type, m_dirty, d."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'dx' function is fully equivalent to the body of 'm31' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'dx' function is fully equivalent to the body of 'm31' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 282,
                  "startLine": 282
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'dx' function is fully equivalent to the body of 'm31' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 294,
                  "startLine": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'dy' function is fully equivalent to the body of 'm32' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'dy' function is fully equivalent to the body of 'm32' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 286,
                  "startLine": 286
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'dy' function is fully equivalent to the body of 'm32' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 298,
                  "startLine": 298
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: num == 1.. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 310,
                  "endLine": 310
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: div == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 327,
                  "endLine": 327
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: num == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: num == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qtransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 350,
                  "endLine": 350
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[0] == v2.v[0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector2d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[1] == v2.v[1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector2d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[0] != v2.v[0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector2d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[1] != v2.v[1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector2d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector2d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[0] == v2.v[0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[1] == v2.v[1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[2] == v2.v[2]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[0] != v2.v[0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[1] != v2.v[1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[2] != v2.v[2]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector3d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[0] == v2.v[0]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[1] == v2.v[1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[2] == v2.v[2]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[3] == v2.v[3]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[0] != v2.v[0]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[1] != v2.v[1]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[2] != v2.v[2]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: v1.v[3] != v2.v[3]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: v."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qvector4d.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HINSTANCE' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HDC' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HWND' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HFONT' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HPEN' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HBRUSH' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HBITMAP' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HICON' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HCURSOR' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HPALETTE' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HRGN' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HMONITOR' type. The system header file should be used: #include <WinDef.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "V677",
          "message": {
            "text": "Custom declaration of a standard 'HRESULT' type. The system header file should be used: #include <WinNT.h>."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "../../../../A2iA/NewExports/Qt/5.14.2/msvc2017_64/include/QtGui/qwindowdefs_win.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'kob != 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "AddrBase/AddrCommon/AddrCommon_Kob.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'std::string(\"\")' with 'std::string()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "AddrBase/AddrCommon/AddrCommon_Kob.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'endVectorString' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSONSerializableObject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 555,
                  "endLine": 555
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'endVectorString' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSONSerializableObject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 556,
                  "endLine": 556
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSONSerializableObject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSONSerializableObject.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'weightsAndBiases' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSON_Utils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'weightsAndBiases' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSON_Utils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'enumeratedVector' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSON_Utils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'fieldsList' std::vector with std::deque. Overall efficiency of operations will increase."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CommonXML/File/JSON/JSON_Utils_Base.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'BusEvent' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Bus/BusEvent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressErrorContext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressErrorContext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressErrorContext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressErrorContext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressErrorContext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressFormatter.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressFormatter.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressFormatter.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const long& aValue' with 'long aValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressFormatter.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 313,
                  "endLine": 313
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/ComModule/Progress/Base/ProgressMessageBuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_CurrentIndent = \"\"' with '_CurrentIndent.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/File/OutputIndentedLines.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'src_img' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 78, 91"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 78, 91"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 78,
                  "startLine": 78
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 78, 91"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 91,
                  "startLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 104, 111"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 104, 111"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 104,
                  "startLine": 104
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 104, 111"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 111,
                  "startLine": 111
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 720, 731"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 720,
                  "endLine": 720
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 720, 731"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 720,
                  "startLine": 720
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 720, 731"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 731,
                  "startLine": 731
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1051",
          "message": {
            "text": "Consider checking for misprints. It's possible that the 'img' should be checked here."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'img' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 266,
                  "startLine": 266
                }
              }
            },
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'img' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 268,
                  "startLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V760",
          "message": {
            "text": "Two identical blocks of text were found. The second block begins from line 89."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two identical blocks of text were found. The second block begins from line 89."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 88,
                  "startLine": 88
                }
              }
            },
            {
              "message": {
                "text": "Two identical blocks of text were found. The second block begins from line 89."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 89,
                  "startLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'obj->TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 843, 849."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 849,
                  "endLine": 849
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'obj->TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 843, 849."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 843,
                  "startLine": 843
                }
              }
            },
            {
              "message": {
                "text": "The 'obj->TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 843, 849."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 849,
                  "startLine": 849
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'subobjs[isub]->TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 864, 878."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 878,
                  "endLine": 878
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'subobjs[isub]->TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 864, 878."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 864,
                  "startLine": 864
                }
              }
            },
            {
              "message": {
                "text": "The 'subobjs[isub]->TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 864, 878."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Builder/CIRBuilderInMemory.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 878,
                  "startLine": 878
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1048",
          "message": {
            "text": "The 'isOk' variable was assigned the same value."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 476,
                  "endLine": 476
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'isOk' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 470, 476."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 476,
                  "endLine": 476
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'isOk' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 470, 476."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 470,
                  "startLine": 470
                }
              }
            },
            {
              "message": {
                "text": "The 'isOk' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 470, 476."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 476,
                  "startLine": 476
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_LoadFilename = \"\"' with '_LoadFilename.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_LoadFilename = \"\"' with '_LoadFilename.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 314,
                  "endLine": 314
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 337,
                  "endLine": 337
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'FRAUD_TAG_HAS_INVALID' is a dangerous expression. The parameter 'tag' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'FRAUD_TAG_HAS_NOT_TRAINED' is a dangerous expression. The parameter 'tag' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRAgent.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The 'false' value is implicitly cast to the integer type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRControler.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The 'false' value is implicitly cast to the integer type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRControler.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_fatalErrorMessage = \"\"' with '_fatalErrorMessage.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRControler.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_warningMessage = \"\"' with '_warningMessage.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRControler.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'result = \"\"' with 'result.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/CIRTransform.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The '_chq_info' function argument possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'profile_results' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'profile_results' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 155, 311."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 311,
                  "endLine": 311
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 155, 311."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 155,
                  "startLine": 155
                }
              }
            },
            {
              "message": {
                "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 155, 311."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 311,
                  "startLine": 311
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1048",
          "message": {
            "text": "The 'j.name' variable was assigned the same value."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 155, 174."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 155, 174."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 155,
                  "startLine": 155
                }
              }
            },
            {
              "message": {
                "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 155, 174."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 174,
                  "startLine": 174
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'deci.FraudProbs' pointer was used unsafely after it was verified against nullptr. Check lines: 165, 340."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 340,
                  "endLine": 340
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'deci.FraudProbs' pointer was used unsafely after it was verified against nullptr. Check lines: 165, 340."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 165,
                  "startLine": 165
                }
              }
            },
            {
              "message": {
                "text": "The 'deci.FraudProbs' pointer was used unsafely after it was verified against nullptr. Check lines: 165, 340."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/DetailedScores.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 340,
                  "startLine": 340
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: Fraud_ObjIDUndef != srcobjcore->ID."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: newind < 0."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: inIdRecSource->pYOLODatas."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: Fraud_ObjIDUndef != srcobjcore->ID."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 344
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: newind < 0."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 369
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: inIdRecSource->pYOLODatas."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 476,
                  "endLine": 476
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: inIdRecSource->pYOLODatas[srcimgind]."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 476,
                  "endLine": 476
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: Fraud_ObjIDUndef != srcobjcore->ID."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 606,
                  "endLine": 606
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: newind < 0."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 631,
                  "endLine": 631
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 731,
                  "endLine": 731
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: inoutIdRecSource->pYOLODatas."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 731,
                  "endLine": 731
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: Fraud_ObjIDUndef != srcobjcore->ID."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 865,
                  "endLine": 865
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: newind < 0."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 890,
                  "endLine": 890
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: inoutIdRecSource->pYOLODatas."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 995,
                  "endLine": 995
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: inoutIdRecSource->pYOLODatas[srcimgind]."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_restructuring.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 995,
                  "endLine": 995
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "Dereferencing of the null pointer 'iIdRec->Objs[i]' might take place."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3346,
                  "endLine": 3346
                }
              }
            }
          ]
        },
        {
          "ruleId": "V568",
          "message": {
            "text": "It's odd that the argument of sizeof() operator is the expression."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269
                }
              }
            }
          ]
        },
        {
          "ruleId": "V568",
          "message": {
            "text": "It's odd that the argument of sizeof() operator is the expression."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 271,
                  "endLine": 271
                }
              }
            }
          ]
        },
        {
          "ruleId": "V568",
          "message": {
            "text": "It's odd that the argument of sizeof() operator is the expression."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273
                }
              }
            }
          ]
        },
        {
          "ruleId": "V579",
          "message": {
            "text": "The memcpy function receives the pointer and its size as arguments. It is possibly a mistake. Inspect the third argument."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3611,
                  "endLine": 3611
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jLocValue' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2473,
                  "endLine": 2473
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jLocValue' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2735,
                  "endLine": 2735
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jObj' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3263,
                  "endLine": 3263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jSubObj' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3283,
                  "endLine": 3283
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jObj' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3317,
                  "endLine": 3317
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jSubObj' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3329,
                  "endLine": 3329
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'jImgValue' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3848,
                  "endLine": 3848
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'noffs + ncuroffs <= nBufSz' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2227,
                  "endLine": 2227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'noffs + ncuroffs <= nBufSz' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2265,
                  "endLine": 2265
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression '!pstr' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3358,
                  "endLine": 3358
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'bjparseres' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3999,
                  "endLine": 3999
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression '!struserdata' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4089,
                  "endLine": 4089
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'src_img' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4268,
                  "endLine": 4268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: 0 < idrec->ImgSz."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2920,
                  "endLine": 2920
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: 0 < idrec->ImgSz."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2941,
                  "endLine": 2941
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: loadobj."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2989,
                  "endLine": 2989
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: 0 < idrec->ImgSz."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4094,
                  "endLine": 4094
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: loadobj."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4203,
                  "endLine": 4203
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'strval' pointer was used unsafely after it was verified against nullptr. Check lines: 1666, 1668."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1668,
                  "endLine": 1668
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'strval' pointer was used unsafely after it was verified against nullptr. Check lines: 1666, 1668."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1666,
                  "startLine": 1666
                }
              }
            },
            {
              "message": {
                "text": "The 'strval' pointer was used unsafely after it was verified against nullptr. Check lines: 1666, 1668."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1668,
                  "startLine": 1668
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1897, 1906"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1897,
                  "endLine": 1897
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 1897, 1906"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1897,
                  "startLine": 1897
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 1897, 1906"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1906,
                  "startLine": 1906
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1051",
          "message": {
            "text": "Consider checking for misprints. It's possible that the 'img' should be checked here."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4268,
                  "endLine": 4268
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'img' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 4266,
                  "startLine": 4266
                }
              }
            },
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'img' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 4268,
                  "startLine": 4268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memcmp' function will lead to underflow of the buffer 'bufheader'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2872,
                  "endLine": 2872
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memcmp' function will lead to underflow of the buffer 'bufheadercmp'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2872,
                  "endLine": 2872
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'pStream->m_pJSONValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2533,
                  "endLine": 2533
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'pStream->m_pJSONValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2752,
                  "endLine": 2752
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'plocsrcobj'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3720,
                  "endLine": 3720
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'locsrcsubobjs'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3725,
                  "endLine": 3725
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'pjOldValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3864,
                  "endLine": 3864
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'pjOldValue'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3907,
                  "endLine": 3907
                }
              }
            }
          ]
        },
        {
          "ruleId": "V575",
          "message": {
            "text": "The potential null pointer is passed into 'memcmp' function. Inspect the first argument."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3528,
                  "endLine": 3528
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The 'false' value is implicitly cast to the integer type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1803,
                  "endLine": 1803
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jLocValueDims' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1319,
                  "endLine": 1319
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jLocValueHorzi' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1330,
                  "endLine": 1330
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jLocValueVerti' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1342,
                  "endLine": 1342
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'imgjsonvalue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1726,
                  "endLine": 1726
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jLocValue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2533,
                  "endLine": 2533
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jLocValue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2752,
                  "endLine": 2752
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jImgValue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3181,
                  "endLine": 3181
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jObj' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3249,
                  "endLine": 3249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jSubObj' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3289,
                  "endLine": 3289
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jObj' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3295,
                  "endLine": 3295
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jSubObj' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3335,
                  "endLine": 3335
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jObj' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3340,
                  "endLine": 3340
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'jImgValue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3864,
                  "endLine": 3864
                }
              }
            }
          ]
        },
        {
          "ruleId": "V821",
          "message": {
            "text": "Decreased performance. The 'errbuf' variable can be constructed in a lower level scope."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2849,
                  "endLine": 2849
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. The 'errbuf' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2849,
                  "startLine": 2849
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. The 'errbuf' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2852,
                  "startLine": 2852
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 449, 449"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 449, 449, 449"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1893, 1893, 1893"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1893,
                  "endLine": 1893
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1048",
          "message": {
            "text": "The 'bufheader[7]' variable was assigned the same value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3084,
                  "endLine": 3084
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression '!blocres' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1268,
                  "endLine": 1268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: 0 < iSz."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1200,
                  "endLine": 1200
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'fltarr'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1189,
                  "endLine": 1189
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'dblarr'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1194,
                  "endLine": 1194
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'fltarr'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1326,
                  "endLine": 1326
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'dblarr'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1333,
                  "endLine": 1333
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'arrjsonvalue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1172,
                  "endLine": 1172
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'arrjsonvalue' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Fraud_serialization.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1220,
                  "endLine": 1220
                }
              }
            }
          ]
        },
        {
          "ruleId": "V768",
          "message": {
            "text": "The variable 'parentObj' is of enum type. It is odd that it is used as a variable of a Boolean-type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Visitor/CIRGuide.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 353,
                  "endLine": 353
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'aNextVisitor' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Visitor/CIRVisitor.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the third function argument as a reference. Consider replacing 'const .. header' with 'const .. &header'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Visitor/CIRVisitorDeep.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 351,
                  "endLine": 351
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Visitor/CIRVisitor_CountAndFlag.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Visitor/CIRVisitor_CountAndFlag.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'aLocalVersionSet' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/Fraud/Visitor/CIRVisitor_FilterDetectorVersion.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'CharFlagInited' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Common/String/DataFormatGuesser.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1106",
          "message": {
            "text": "The 'QtProgressLoggerModel' class is inherited directly from the QObject class but does not provide it as a field nor as a parameter of one of constructors."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CoreQt/ComponentsQt/Widgets/QtProgressLogger/QtProgressLoggerModel.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'value' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Distribution/Distrib/CPUArgs.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V556",
          "message": {
            "text": "The values of different enum types are compared: m_State >= STATE_FLAG__FINISHED. Types: RequestState, RequestStateFlag."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Distribution/Distrib/Request.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V667",
          "message": {
            "text": "The 'throw' operator does not possess any arguments and is not situated within the 'catch' block."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Distribution/Distrib/Request.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V667",
          "message": {
            "text": "The 'throw' operator does not possess any arguments and is not situated within the 'catch' block."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Distribution/Distrib/Request.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Distribution/Distrib/RequestStack.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 180
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ]
        },
        {
          "ruleId": "V607",
          "message": {
            "text": "Ownerless expression '(float) deci.ObjDecis[i].FraudProbs[ind]'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'test_images' std::vector with std::array. The size is known at compile time."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'num_images_in_profile' std::vector with std::array. The size is known at compile time."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'result' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'myParam' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 264
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'myParam' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 301,
                  "endLine": 301
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'result' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'myParam' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 510,
                  "endLine": 510
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memset' function will lead to underflow of the buffer 'chq._CHQ_DETECT_FRAUD'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memset' function will lead to underflow of the buffer 'chq._CHQ_DETECT_FRAUD'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memset' function will lead to underflow of the buffer 'chq._CHQ_DETECT_FRAUD'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memset' function will lead to underflow of the buffer 'chq._CHQ_DETECT_FRAUD'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memset' function will lead to underflow of the buffer 'chq._CHQ_DETECT_FRAUD'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 405,
                  "endLine": 405
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 444,
                  "endLine": 444
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 444,
                  "startLine": 444
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 447,
                  "startLine": 447
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 448,
                  "startLine": 448
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 445,
                  "endLine": 445
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 445,
                  "startLine": 445
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 449,
                  "startLine": 449
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel.nrt/X_Kernel_test_Check/X_Kernel_test_CheckFraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 450,
                  "startLine": 450
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 56 to 48 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/FldLoc/FldLocTbl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "V568",
          "message": {
            "text": "It's odd that the argument of sizeof() operator is the expression."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1805,
                  "endLine": 1805
                }
              }
            }
          ]
        },
        {
          "ruleId": "V595",
          "message": {
            "text": "The 'm_pCheque' pointer was utilized before it was verified against nullptr. Check lines: 1713, 1732."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1713,
                  "endLine": 1713
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'm_pCheque' pointer was utilized before it was verified against nullptr. Check lines: 1713, 1732."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1713,
                  "startLine": 1713
                }
              }
            },
            {
              "message": {
                "text": "The 'm_pCheque' pointer was utilized before it was verified against nullptr. Check lines: 1713, 1732."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1732,
                  "startLine": 1732
                }
              }
            }
          ]
        },
        {
          "ruleId": "V595",
          "message": {
            "text": "The 'pFraudChqDeci' pointer was utilized before it was verified against nullptr. Check lines: 1799, 1802."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1799,
                  "endLine": 1799
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'pFraudChqDeci' pointer was utilized before it was verified against nullptr. Check lines: 1799, 1802."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1799,
                  "startLine": 1799
                }
              }
            },
            {
              "message": {
                "text": "The 'pFraudChqDeci' pointer was utilized before it was verified against nullptr. Check lines: 1799, 1802."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1802,
                  "startLine": 1802
                }
              }
            }
          ]
        },
        {
          "ruleId": "V595",
          "message": {
            "text": "The 'm_pIdRec' pointer was utilized before it was verified against nullptr. Check lines: 1969, 1984."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1969,
                  "endLine": 1969
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'm_pIdRec' pointer was utilized before it was verified against nullptr. Check lines: 1969, 1984."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1969,
                  "startLine": 1969
                }
              }
            },
            {
              "message": {
                "text": "The 'm_pIdRec' pointer was utilized before it was verified against nullptr. Check lines: 1969, 1984."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1984,
                  "startLine": 1984
                }
              }
            }
          ]
        },
        {
          "ruleId": "V811",
          "message": {
            "text": "Decreased performance. Excessive type casting: string -> char * -> string. Consider inspecting the expression."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2965,
                  "endLine": 2965
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'stdiv' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 1425, 1438."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1438,
                  "endLine": 1438
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'stdiv' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 1425, 1438."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1425,
                  "startLine": 1425
                }
              }
            },
            {
              "message": {
                "text": "The 'stdiv' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 1425, 1438."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1438,
                  "startLine": 1438
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'm_pObjImg' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1559,
                  "endLine": 1559
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'iDocInfo' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3302,
                  "endLine": 3302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: baseobj."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3417,
                  "endLine": 3417
                }
              }
            }
          ]
        },
        {
          "ruleId": "V560",
          "message": {
            "text": "A part of conditional expression is always true: recobaseobj."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3417,
                  "endLine": 3417
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'extrrt.left * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1217,
                  "endLine": 1217
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'extrrt.top * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1218,
                  "endLine": 1218
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'Utils_rect_get_w(extrrt) * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1219,
                  "endLine": 1219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'ht * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1221,
                  "endLine": 1221
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'baseline * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1227,
                  "endLine": 1227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'imgcnt * 200 * 200 / resol / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1409,
                  "endLine": 1409
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'sklcnt * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1415,
                  "endLine": 1415
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'objs->zone->left * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1555,
                  "endLine": 1555
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The 'objs->zone->top * 200 / resol' expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1556,
                  "endLine": 1556
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1557,
                  "endLine": 1557
                }
              }
            }
          ]
        },
        {
          "ruleId": "V636",
          "message": {
            "text": "The expression was implicitly cast from 'int' type to 'double' type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1558,
                  "endLine": 1558
                }
              }
            }
          ]
        },
        {
          "ruleId": "V728",
          "message": {
            "text": "An excessive check can be simplified. The '||' operator is surrounded by opposite expressions 'mincurrankind < 0' and '0 <= mincurrankind'. "
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3239,
                  "endLine": 3239
                }
              }
            }
          ]
        },
        {
          "ruleId": "V764",
          "message": {
            "text": "Possible incorrect order of arguments passed to 's_CmpImgs' function: 'ww' and 'bb'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2309,
                  "endLine": 2309
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Possible incorrect order of arguments passed to 's_CmpImgs' function: 'ww' and 'bb'."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 88,
                  "startLine": 88
                }
              }
            },
            {
              "message": {
                "text": "Possible incorrect order of arguments passed to 's_CmpImgs' function: 'ww' and 'bb'."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2309,
                  "startLine": 2309
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'cur' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'cur' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 301,
                  "endLine": 301
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'cur' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 335,
                  "endLine": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'cur' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'cur' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 879,
                  "endLine": 879
                }
              }
            }
          ]
        },
        {
          "ruleId": "V803",
          "message": {
            "text": "Decreased performance. In case 'cur' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2196,
                  "endLine": 2196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) > 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1872,
                  "endLine": 1872
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) > 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2223,
                  "endLine": 2223
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3273,
                  "endLine": 3273
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'dir' array was declared but was not utilized."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'drive' array was declared but was not utilized."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'name' array was declared but was not utilized."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'objreco' pointer was used unsafely after it was verified against nullptr. Check lines: 2249, 2258."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2258,
                  "endLine": 2258
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'objreco' pointer was used unsafely after it was verified against nullptr. Check lines: 2249, 2258."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2249,
                  "startLine": 2249
                }
              }
            },
            {
              "message": {
                "text": "The 'objreco' pointer was used unsafely after it was verified against nullptr. Check lines: 2249, 2258."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2258,
                  "startLine": 2258
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 4047, 4056"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4047,
                  "endLine": 4047
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 4047, 4056"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 4047,
                  "startLine": 4047
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions. Check lines: 4047, 4056"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 4056,
                  "startLine": 4056
                }
              }
            }
          ]
        },
        {
          "ruleId": "V575",
          "message": {
            "text": "The potential null pointer is passed into 'fprintf' function. Inspect the first argument."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2197,
                  "endLine": 2197
                }
              }
            }
          ]
        },
        {
          "ruleId": "V631",
          "message": {
            "text": "Consider inspecting the 'fopen' function call. Defining an absolute path to the file or directory is considered a poor style."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2195,
                  "endLine": 2195
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 's_Buf = \"\"' with 's_Buf.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3033,
                  "endLine": 3033
                }
              }
            }
          ]
        },
        {
          "ruleId": "V821",
          "message": {
            "text": "Decreased performance. The 'result' variable can be constructed in a lower level scope."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4450,
                  "endLine": 4450
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. The 'result' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 4450,
                  "startLine": 4450
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. The 'result' variable can be constructed in a lower level scope."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 4468,
                  "startLine": 4468
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 563,
                  "endLine": 563
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4026,
                  "endLine": 4026
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4026,
                  "endLine": 4026
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'newxmul' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2605,
                  "endLine": 2605
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'oldxmul' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2607,
                  "endLine": 2607
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'newxmul' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2706,
                  "endLine": 2706
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1026",
          "message": {
            "text": "The 'oldxmul' variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2708,
                  "endLine": 2708
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1067, 1067"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1067,
                  "endLine": 1067
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1067, 1067, 1067"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1067,
                  "endLine": 1067
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1134, 1134"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1134,
                  "endLine": 1134
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1267, 1267"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1267,
                  "endLine": 1267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 1267, 1267, 1267"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1267,
                  "endLine": 1267
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1037",
          "message": {
            "text": "Two or more case-branches perform the same actions. Check lines: 4043, 4043, 4043"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4043,
                  "endLine": 4043
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: vGlob, vLayers, vDilation, vhDistr, vvDistr, vhCorr, ..."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_hwr_reco.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "V674",
          "message": {
            "text": "The '.5' literal of the 'double' type is compared to a value of the 'int' type. Consider inspecting the 'intersection_percent > .5' expression."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 506,
                  "endLine": 506
                }
              }
            }
          ]
        },
        {
          "ruleId": "V836",
          "message": {
            "text": "Expression's value is copied at the 'bs' variable declaration. The variable is never modified. Consider declaring it as a reference."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1025,
                  "endLine": 1025
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'iDeci->v_loc != 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 511,
                  "endLine": 511
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'iDeci->v_loc != 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 547,
                  "endLine": 547
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'loc_prob_vector' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 411,
                  "endLine": 411
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'profile_vector' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 751,
                  "endLine": 751
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'cd' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 797,
                  "endLine": 797
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'bsv' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 923,
                  "endLine": 923
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'signatures_profile_data' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 925,
                  "endLine": 925
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'sort_vector' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'distribution' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 406,
                  "endLine": 406
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'distribution' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'distribution_fixed' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 440,
                  "endLine": 440
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1051",
          "message": {
            "text": "Consider checking for misprints. It's possible that the 'SigNN3::nnet' should be checked here."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'SigNN3::nnet' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 61,
                  "startLine": 61
                }
              }
            },
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'SigNN3::nnet' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 68,
                  "startLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1051",
          "message": {
            "text": "Consider checking for misprints. It's possible that the 'SigNN3::preproc' should be checked here."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'SigNN3::preproc' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 74,
                  "startLine": 74
                }
              }
            },
            {
              "message": {
                "text": "Consider checking for misprints. It's possible that the 'SigNN3::preproc' should be checked here."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 75,
                  "startLine": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1073",
          "message": {
            "text": "Consider checking for misprints. Check the following code block after the if statement."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 724,
                  "endLine": 724
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider checking for misprints. Check the following code block after the if statement."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 724,
                  "startLine": 724
                }
              }
            },
            {
              "message": {
                "text": "Consider checking for misprints. Check the following code block after the if statement."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 725,
                  "startLine": 725
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "Dereferencing of the null pointer 'img' might take place. The potential null pointer is passed into 'Recognize' function. Inspect the first argument. Check lines: 87, 588."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Dereferencing of the null pointer 'img' might take place. The potential null pointer is passed into 'Recognize' function. Inspect the first argument. Check lines: 87, 588."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 87,
                  "startLine": 87
                }
              }
            },
            {
              "message": {
                "text": "Dereferencing of the null pointer 'img' might take place. The potential null pointer is passed into 'Recognize' function. Inspect the first argument. Check lines: 87, 588."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 588,
                  "startLine": 588
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1165,
                  "endLine": 1165
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1165,
                  "startLine": 1165
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1166,
                  "startLine": 1166
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'loc_prob_vector' argument should probably be rendered as a constant reference."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 398,
                  "endLine": 398
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'SigNN3::cnn_path_ov = \"\"' with 'SigNN3::cnn_path_ov.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'iDeci->extr_img' pointer was used unsafely after it was verified against nullptr. Check lines: 304, 318."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 318,
                  "endLine": 318
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'iDeci->extr_img' pointer was used unsafely after it was verified against nullptr. Check lines: 304, 318."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 304,
                  "startLine": 304
                }
              }
            },
            {
              "message": {
                "text": "The 'iDeci->extr_img' pointer was used unsafely after it was verified against nullptr. Check lines: 304, 318."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 318,
                  "startLine": 318
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 617, 624."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 624,
                  "endLine": 624
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 617, 624."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 617,
                  "startLine": 617
                }
              }
            },
            {
              "message": {
                "text": "The 'TrainGrp.Imgs' pointer was used unsafely after it was verified against nullptr. Check lines: 617, 624."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Fraud/Fraud_signature_CNN.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 624,
                  "startLine": 624
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'Registrator' constructor contains potentially uninitialized members. Inspect the following: _desc."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_Registrator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'Registrator' constructor contains potentially uninitialized members. Inspect the following: _desc."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_Registrator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 96,
                  "startLine": 96
                }
              }
            },
            {
              "message": {
                "text": "The 'Registrator' constructor contains potentially uninitialized members. Inspect the following: _desc."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_Registrator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 105,
                  "startLine": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_Registrator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (_seek_res)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_blank_name = \"\"' with '_blank_name.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 420,
                  "endLine": 420
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_blankname = \"\"' with '_blankname.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/GuideMarksAuto/GuideMarksAuto_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 446,
                  "endLine": 446
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'data' std::vector with std::list. Overall efficiency of operations will increase."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Utils/Utils_AS_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'data' std::vector with std::list. Overall efficiency of operations will increase."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Utils/Utils_AS_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "DocLevel/Utils/Utils_AS_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageIO/Core/ImageIOTypesPrivate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageIO/External/Interfaces/ImageLoader.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageIO/External/Interfaces/ImageProcessor.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageIO/External/Interfaces/ImageProvider.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageIO/External/Interfaces/ImageWriter.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageIO/External/Interfaces/ImageWriterImpl.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 65,
                  "startLine": 65
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 66,
                  "startLine": 66
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 68,
                  "startLine": 68
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 69,
                  "startLine": 69
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 81,
                  "startLine": 81
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 82,
                  "startLine": 82
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 84,
                  "startLine": 84
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 85,
                  "startLine": 85
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 87,
                  "startLine": 87
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 88,
                  "startLine": 88
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 102,
                  "startLine": 102
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 103,
                  "startLine": 103
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 105,
                  "startLine": 105
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 106,
                  "startLine": 106
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 108,
                  "startLine": 108
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 109,
                  "startLine": 109
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 111,
                  "startLine": 111
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 112,
                  "startLine": 112
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 114,
                  "startLine": 114
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 115,
                  "startLine": 115
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 139,
                  "startLine": 139
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 140,
                  "startLine": 140
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 142,
                  "startLine": 142
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 143,
                  "startLine": 143
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 156,
                  "startLine": 156
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 157,
                  "startLine": 157
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 159,
                  "startLine": 159
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 160,
                  "startLine": 160
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 162,
                  "startLine": 162
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 163,
                  "startLine": 163
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 177,
                  "startLine": 177
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 178,
                  "startLine": 178
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 180,
                  "startLine": 180
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 181,
                  "startLine": 181
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 183,
                  "startLine": 183
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 184,
                  "startLine": 184
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 186,
                  "startLine": 186
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 187,
                  "startLine": 187
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 189,
                  "startLine": 189
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 190,
                  "startLine": 190
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 214,
                  "startLine": 214
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 215,
                  "startLine": 215
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 218,
                  "startLine": 218
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 219,
                  "startLine": 219
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 222,
                  "startLine": 222
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'pq.top()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 223,
                  "startLine": 223
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. p' with 'const .. &p'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 613,
                  "endLine": 613
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& p1' with 'Point p1'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 210
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const Point& p2' with 'Point p2'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 210
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& a' with 'Point a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const Point& b' with 'Point b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& a' with 'Point a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const Point& b' with 'Point b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& p1' with 'Point p1'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const Point& p2' with 'Point p2'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& p1' with 'Point p1'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const RealPoint& p1' with 'RealPoint p1'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const RealPoint& p2' with 'RealPoint p2'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const RealPoint& a' with 'RealPoint a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const RealPoint& b' with 'RealPoint b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const RealPoint& a' with 'RealPoint a'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const RealPoint& b' with 'RealPoint b'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const RealPoint& p1' with 'RealPoint p1'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const RealPoint& p2' with 'RealPoint p2'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const RealPoint& p1' with 'RealPoint p1'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 396
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 396
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 405,
                  "endLine": 405
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 405,
                  "endLine": 405
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 435,
                  "endLine": 435
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 438,
                  "endLine": 438
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 438,
                  "endLine": 438
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 488,
                  "endLine": 488
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 489,
                  "endLine": 489
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 489,
                  "endLine": 489
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 493,
                  "endLine": 493
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 493,
                  "endLine": 493
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 524,
                  "endLine": 524
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 525,
                  "endLine": 525
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 525,
                  "endLine": 525
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 529,
                  "endLine": 529
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 529,
                  "endLine": 529
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 560,
                  "endLine": 560
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 561,
                  "endLine": 561
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 561,
                  "endLine": 561
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 565,
                  "endLine": 565
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreCommon.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 565,
                  "endLine": 565
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& p' with 'Point p'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreZone.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const Point& p' with 'Point p'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/ImpCoreZone.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 335,
                  "endLine": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "V659",
          "message": {
            "text": "Declarations of functions with 'DisplaySegmentOnImage' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 410, 436."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCoreConnectedComponentTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 436,
                  "endLine": 436
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Declarations of functions with 'DisplaySegmentOnImage' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 410, 436."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCoreConnectedComponentTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 410,
                  "startLine": 410
                }
              }
            },
            {
              "message": {
                "text": "Declarations of functions with 'DisplaySegmentOnImage' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 410, 436."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCoreConnectedComponentTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 436,
                  "startLine": 436
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1071",
          "message": {
            "text": "Consider inspecting the 'top' function. The return value is not always used. Total calls: 41, discarded results: 1."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCorePriorityQueueTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider inspecting the 'top' function. The return value is not always used. Total calls: 41, discarded results: 1."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing.nrt/Core/TestImpCorePriorityQueueTools.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 38,
                  "startLine": 38
                }
              }
            },
            {
              "message": {
                "text": "Consider inspecting the 'top' function. The return value is not always used. Total calls: 41, discarded results: 1."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCorePriorityQueueTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 104,
                  "startLine": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCorePriorityQueueTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: array_cmp."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCoreRLETools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Core/include/private/ImpCoreRLETools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the first function argument as a reference. Consider replacing 'const .. image_processor' with 'const .. &image_processor'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Processors/include/ImpProcImageProcessor.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the 'previousLineDilatedDelta.back()' expression repeatedly."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/ShapeAnalysis/include/private/ImpShapeAnPerimeterTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1212,
                  "endLine": 1212
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'previousLineDilatedDelta.back()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/ShapeAnalysis/include/private/ImpShapeAnPerimeterTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1212,
                  "startLine": 1212
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'previousLineDilatedDelta.back()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/ShapeAnalysis/include/private/ImpShapeAnPerimeterTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1218,
                  "startLine": 1218
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the 'previousLineDilatedDelta.back()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/ShapeAnalysis/include/private/ImpShapeAnPerimeterTools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 1225,
                  "startLine": 1225
                }
              }
            }
          ]
        },
        {
          "ruleId": "V827",
          "message": {
            "text": "Maximum size of the 'lOriginalExtremum' vector is known at compile time. Consider pre-allocating it by calling lOriginalExtremum.reserve(4)"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'WidthType' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const float& iAngle' with 'float iAngle'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the third argument 'const int& iBackground' with 'int iBackground'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const float& iAngle' with 'float iAngle'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 340,
                  "endLine": 340
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the third argument 'const int& iBackground' with 'int iBackground'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 340,
                  "endLine": 340
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1034",
          "message": {
            "text": "Do not use real type variables as loop counters."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1034",
          "message": {
            "text": "Do not use real type variables as loop counters."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ImageProcessing/Tasks/src/ImpTaskRotation.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'dat' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIAccessPtr.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'nil' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIAccessPtr.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1397,
                  "endLine": 1397
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1402,
                  "endLine": 1402
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1408,
                  "endLine": 1408
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The '_APIValueData' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 544,
                  "endLine": 544
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'GetParent()' pointer was used unsafely after it was verified against nullptr. Check lines: 2282, 2287."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2287,
                  "endLine": 2287
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'GetParent()' pointer was used unsafely after it was verified against nullptr. Check lines: 2282, 2287."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2282,
                  "startLine": 2282
                }
              }
            },
            {
              "message": {
                "text": "The 'GetParent()' pointer was used unsafely after it was verified against nullptr. Check lines: 2282, 2287."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2287,
                  "startLine": 2287
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'res' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/APIValue.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1210,
                  "endLine": 1210
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1062",
          "message": {
            "text": "The 'FastAllocatorBase' class defines a custom 'new[]' operator. The 'delete[]' operator must also be defined."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/FastAllocatorBase.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'FastAllocatorBase' class defines a custom 'new[]' operator. The 'delete[]' operator must also be defined."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/FastAllocatorBase.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 25,
                  "startLine": 25
                }
              }
            },
            {
              "message": {
                "text": "The 'FastAllocatorBase' class defines a custom 'new[]' operator. The 'delete[]' operator must also be defined."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIAccess/FastAllocatorBase.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 34,
                  "startLine": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIDef/CData.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "MetaAPI/APIDef/CategoryDef.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "NeuralNetwork/Core/NN3_Samples.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "V668",
          "message": {
            "text": "There is no sense in testing the 'trace_prv::default_trace' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "NeuralNetwork/Factory/NN3_Loader.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'constLayers' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "NeuralNetwork/Layer/Core/NN3_Layer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 983,
                  "endLine": 983
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'strMessage' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "NrtLib/nrt-loader-boost_test.hpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'inputType' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_APIs/APIProduct/RecoEngine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'outputType' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_APIs/APIProduct/RecoEngine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'type' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_APIs/DistribAPI/requestType.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'DONGLE_PARAMETER__TSV_FILENAME' is a dangerous expression. The parameter 'FN' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/A2iARCPg/FakeEngineConstants.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'pageFormat' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeAPI_ImageTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'pagesSummary' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeAPI_ImageTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'message' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeAPI_ImageTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 578,
                  "endLine": 578
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 291
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 291,
                  "startLine": 291
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 292,
                  "startLine": 292
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 293,
                  "startLine": 293
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 294,
                  "startLine": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'result' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'OPEN_CHANNEL_TIMEOUT' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'GET_RESULT_MAX_WAIT_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_RESPONSE_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_PROCESS_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'GET_RESULT_MAX_WAIT_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_RESPONSE_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_PROCESS_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_MultiThreading_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'MICR_Reco' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 560,
                  "endLine": 560
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'MICR_BankCode_Reco' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 567,
                  "endLine": 567
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'_FakeEngineArgument' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 745,
                  "endLine": 745
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'useFakeEngine' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 746,
                  "endLine": 746
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'useFakeEngine' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 762,
                  "endLine": 762
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'useFakeEngine' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 787,
                  "endLine": 787
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'result' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 724,
                  "endLine": 724
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 724,
                  "startLine": 724
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 725,
                  "startLine": 725
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 726,
                  "startLine": 726
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 904,
                  "endLine": 904
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 904,
                  "startLine": 904
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 905,
                  "startLine": 905
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 906,
                  "startLine": 906
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 556,
                  "endLine": 556
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 580,
                  "endLine": 580
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'OPEN_CHANNEL_TIMEOUT' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'GET_RESULT_MAX_WAIT_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_RESPONSE_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_PROCESS_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'GET_RESULT_MAX_WAIT_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_RESPONSE_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MAX_PROCESS_TIME' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'MUST_UPDATE_X_EVERY' is a dangerous expression. The parameters 'counter', 'freq' must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTester.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'RandomRequestList' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_StressTool.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151
                }
              }
            }
          ]
        },
        {
          "ruleId": "V583",
          "message": {
            "text": "The '?:' operator, regardless of its conditional expression, always returns one and the same value: 10."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 375,
                  "endLine": 375
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'errorMessage' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'paramDirAndA2iaRCPg_ErrorInvalidExe' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'paramDirAndA2iaRCPg_ErrorParamDir' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'message' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'errorMessage' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 561,
                  "endLine": 561
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'message' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 646,
                  "endLine": 646
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'errorMessage' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 766,
                  "endLine": 766
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'TestChannelExt' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 695,
                  "endLine": 695
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'targetFileName' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "V813",
          "message": {
            "text": "Decreased performance. The 'paramDirAndA2iaRCPg' argument should probably be rendered as a constant reference."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1020",
          "message": {
            "text": "The function exited without calling the 'instance.ScrCloseChannelParam' function. Check lines: 830, 676."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 830,
                  "endLine": 830
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The function exited without calling the 'instance.ScrCloseChannelParam' function. Check lines: 830, 676."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 676,
                  "startLine": 676
                }
              }
            },
            {
              "message": {
                "text": "The function exited without calling the 'instance.ScrCloseChannelParam' function. Check lines: 830, 676."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/NativeApi_test.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 830,
                  "startLine": 830
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'message' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 653,
                  "endLine": 653
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 807,
                  "endLine": 807
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 825,
                  "endLine": 825
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 865,
                  "endLine": 865
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'fn' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ]
        },
        {
          "ruleId": "V565",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 657,
                  "endLine": 657
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression '_FakeEngineArgument = \"\"' with '_FakeEngineArgument.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the second function argument as a reference. Consider replacing 'const .. postfix' with 'const .. &postfix'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 437,
                  "endLine": 437
                }
              }
            }
          ]
        },
        {
          "ruleId": "V801",
          "message": {
            "text": "Decreased performance. It is better to redefine the second function argument as a reference. Consider replacing 'const .. postfix' with 'const .. &postfix'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_Batcher.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 442,
                  "endLine": 442
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'message' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 525,
                  "endLine": 525
                }
              }
            }
          ]
        },
        {
          "ruleId": "V808",
          "message": {
            "text": "'message' object of 'basic_string' type was created but was not utilized."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 532,
                  "endLine": 532
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 31,
                  "startLine": 31
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 32,
                  "startLine": 32
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 33,
                  "startLine": 33
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 34,
                  "startLine": 34
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a pointer to avoid using the 'progress.AsProgressLocalTask()' expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 46,
                  "startLine": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "V601",
          "message": {
            "text": "The 'true' value is implicitly cast to the integer type. Inspect the first argument."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_BatcherTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'WBT_EngineContext' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_EngineContext.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V824",
          "message": {
            "text": "It is recommended to use the 'make_shared' function to create smart pointers."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base.nrt/Sources/NativeAPI.nrt/WBT_ThreadAware.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'GetStringA7Out' function is fully equivalent to the body of 'GetStringA7InOut' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base/NativeAPI/JavaUtilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'GetStringA7Out' function is fully equivalent to the body of 'GetStringA7InOut' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base/NativeAPI/JavaUtilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 217,
                  "startLine": 217
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'GetStringA7Out' function is fully equivalent to the body of 'GetStringA7InOut' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base/NativeAPI/JavaUtilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 222,
                  "startLine": 222
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'GetStringEncodedOut' function is fully equivalent to the body of 'GetStringEncodedInOut' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base/NativeAPI/JavaUtilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'GetStringEncodedOut' function is fully equivalent to the body of 'GetStringEncodedInOut' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base/NativeAPI/JavaUtilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 244,
                  "startLine": 244
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'GetStringEncodedOut' function is fully equivalent to the body of 'GetStringEncodedInOut' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Base/NativeAPI/JavaUtilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 249,
                  "startLine": 249
                }
              }
            }
          ]
        },
        {
          "ruleId": "V829",
          "message": {
            "text": "Lifetime of the heap-allocated variable 'requestedParams' is limited to the current function's scope. Consider allocating it on the stack instead."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 681,
                  "endLine": 681
                }
              }
            }
          ]
        },
        {
          "ruleId": "V829",
          "message": {
            "text": "Lifetime of the heap-allocated variable 'requestedParams' is limited to the current function's scope. Consider allocating it on the stack instead."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 793,
                  "endLine": 793
                }
              }
            }
          ]
        },
        {
          "ruleId": "V829",
          "message": {
            "text": "Lifetime of the heap-allocated variable 'requestedParams' is limited to the current function's scope. Consider allocating it on the stack instead."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1127,
                  "endLine": 1127
                }
              }
            }
          ]
        },
        {
          "ruleId": "V829",
          "message": {
            "text": "Lifetime of the heap-allocated variable 'requestedParams' is limited to the current function's scope. Consider allocating it on the stack instead."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1630,
                  "endLine": 1630
                }
              }
            }
          ]
        },
        {
          "ruleId": "V506",
          "message": {
            "text": "Pointer to local variable 'fileName' is stored outside the scope of this variable. Such a pointer will become invalid."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2427,
                  "endLine": 2427
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 431,
                  "endLine": 431
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 687,
                  "endLine": 687
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 799,
                  "endLine": 799
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1133,
                  "endLine": 1133
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1636,
                  "endLine": 1636
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3943,
                  "endLine": 3943
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4082,
                  "endLine": 4082
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 4192,
                  "endLine": 4192
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 56, 60."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 56, 60."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 56,
                  "startLine": 56
                }
              }
            },
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 56, 60."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 60,
                  "startLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'ScoreUseSignatureBestCandidateYes' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 479, 517."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 517,
                  "endLine": 517
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'ScoreUseSignatureBestCandidateYes' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 479, 517."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 479,
                  "startLine": 479
                }
              }
            },
            {
              "message": {
                "text": "The 'ScoreUseSignatureBestCandidateYes' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 479, 517."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 517,
                  "startLine": 517
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2324, 2327."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2327,
                  "endLine": 2327
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2324, 2327."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2324,
                  "startLine": 2324
                }
              }
            },
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2324, 2327."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2327,
                  "startLine": 2327
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2336, 2339."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2339,
                  "endLine": 2339
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2336, 2339."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2336,
                  "startLine": 2336
                }
              }
            },
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2336, 2339."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2339,
                  "startLine": 2339
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2353, 2359."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2359,
                  "endLine": 2359
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2353, 2359."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2353,
                  "startLine": 2353
                }
              }
            },
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2353, 2359."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2359,
                  "startLine": 2359
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2372, 2379."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2379,
                  "endLine": 2379
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2372, 2379."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2372,
                  "startLine": 2372
                }
              }
            },
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2372, 2379."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2379,
                  "startLine": 2379
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2391, 2397."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2397,
                  "endLine": 2397
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2391, 2397."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2391,
                  "startLine": 2391
                }
              }
            },
            {
              "message": {
                "text": "The 'err' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2391, 2397."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2397,
                  "startLine": 2397
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3919,
                  "endLine": 3919
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 3919,
                  "startLine": 3919
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 3924,
                  "startLine": 3924
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 3929,
                  "startLine": 3929
                }
              }
            }
          ]
        },
        {
          "ruleId": "V815",
          "message": {
            "text": "Decreased performance. Consider replacing the expression 'UseSignatureBestCandidateParam = string(\"\")' with 'UseSignatureBestCandidateParam.clear()'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel.nrt/Sources/CheckReader/CheckStockTest.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 497
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Availabilities/Availabilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1003",
          "message": {
            "text": "The macro 'SUBFEATURE' is a dangerous expression. The expression must be surrounded by parentheses."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Availabilities/Availabilities.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/ClickCount/FieldInfoRecoEx.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1048",
          "message": {
            "text": "The '_fraudOptimization' variable was assigned the same value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1048",
          "message": {
            "text": "The '_fraudOptimization' variable was assigned the same value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "V781",
          "message": {
            "text": "The value of the 'deci.BestImgInd' variable is checked after it was used. Perhaps there is a mistake in program logic. Check lines: 223, 228."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The value of the 'deci.BestImgInd' variable is checked after it was used. Perhaps there is a mistake in program logic. Check lines: 223, 228."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 223,
                  "startLine": 223
                }
              }
            },
            {
              "message": {
                "text": "The value of the 'deci.BestImgInd' variable is checked after it was used. Perhaps there is a mistake in program logic. Check lines: 223, 228."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 228,
                  "startLine": 228
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'reasons' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'reasons' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'reasons' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'reasons' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'reasons' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 306,
                  "endLine": 306
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'reasons' container. Consider replacing methods: 'push_back' -> 'emplace_back'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 437,
                  "endLine": 437
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 228, 260."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 260
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 228, 260."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 228,
                  "startLine": 228
                }
              }
            },
            {
              "message": {
                "text": "The 'inputCIRs' pointer was used unsafely after it was verified against nullptr. Check lines: 228, 260."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTestDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 260,
                  "startLine": 260
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: _timestamp, _checkId."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTrainDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V779",
          "message": {
            "text": "Unreachable code detected. It is possible that an error is present."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTrainDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232
                }
              }
            }
          ]
        },
        {
          "ruleId": "V807",
          "message": {
            "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTrainDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTrainDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 59,
                  "startLine": 59
                }
              }
            },
            {
              "message": {
                "text": "Decreased performance. Consider creating a reference to avoid using the same expression repeatedly."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/CheckStockTrainDocument.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 60,
                  "startLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V648",
          "message": {
            "text": "Priority of the '&&' operation is higher than that of the '||' operation."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Documents/Document.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'GetPreprocessedResolutionY' function is fully equivalent to the body of 'GetPreprocessedResolution' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Models/DocumentImage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'GetPreprocessedResolutionY' function is fully equivalent to the body of 'GetPreprocessedResolution' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Models/DocumentImage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 222,
                  "startLine": 222
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'GetPreprocessedResolutionY' function is fully equivalent to the body of 'GetPreprocessedResolution' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Models/DocumentImage.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 228,
                  "startLine": 228
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'instance' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Tools/APIImageBuilder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: _marker, _isFound, _seeked, _reversed."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "P_Kernel/Tools/Marker.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const enum AUTOORIENTATION_OPTIONS& to_set' with 'enum AUTOORIENTATION_OPTIONS to_set'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/FldLoc/FldLoc_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'c' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/FldLoc/FldLoc_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Fraud/Fraud_param.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Gd2/Gd2.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Composition' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/GeoTransfo/GeoTransfo.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'NonlinearSkew0' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/GeoTransfo/GeoTransfo_concr.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 344
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Translation' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/GeoTransfo/GeoTransfo_concr.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'AffineTransfo' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/GeoTransfo/GeoTransfo_concr.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Distortion' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/GeoTransfo/GeoTransfo_concr.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 311,
                  "endLine": 311
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Proj_class_support.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the compiler generated constructor. Consider inspecting: nl, nc, resol."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 411,
                  "endLine": 411
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 614,
                  "endLine": 614
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 24 to 16 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 644,
                  "endLine": 644
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 40 to 32 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1050,
                  "endLine": 1050
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 48 to 40 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Project/Project_deci.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1059,
                  "endLine": 1059
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/ScrExt/ScrExt_struct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/ScrExt/ScrExt_struct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 72 to 64 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Skeleton/Skeleton.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'iterator' function. Inspect the first argument. Check lines: 728, 853."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 728,
                  "endLine": 728
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'iterator' function. Inspect the first argument. Check lines: 728, 853."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 728,
                  "startLine": 728
                }
              }
            },
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'iterator' function. Inspect the first argument. Check lines: 728, 853."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 853,
                  "startLine": 853
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'iterator' function. Inspect the first argument. Check lines: 728, 859."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 728,
                  "endLine": 728
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'iterator' function. Inspect the first argument. Check lines: 728, 859."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 728,
                  "startLine": 728
                }
              }
            },
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'iterator' function. Inspect the first argument. Check lines: 728, 859."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 859,
                  "startLine": 859
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'line_iterator' function. Inspect the first argument. Check lines: 804, 888."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 804,
                  "endLine": 804
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'line_iterator' function. Inspect the first argument. Check lines: 804, 888."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 804,
                  "startLine": 804
                }
              }
            },
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'line_iterator' function. Inspect the first argument. Check lines: 804, 888."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 888,
                  "startLine": 888
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'line_iterator' function. Inspect the first argument. Check lines: 804, 894."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 804,
                  "endLine": 804
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'line_iterator' function. Inspect the first argument. Check lines: 804, 894."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 804,
                  "startLine": 804
                }
              }
            },
            {
              "message": {
                "text": "Dereferencing of the null pointer 'layer' might take place. The null pointer is passed into 'line_iterator' function. Inspect the first argument. Check lines: 804, 894."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 894,
                  "startLine": 894
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end, _word_end."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 723,
                  "endLine": 723
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end, _word_end."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 723,
                  "startLine": 723
                }
              }
            },
            {
              "message": {
                "text": "The 'iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end, _word_end."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 732,
                  "startLine": 732
                }
              }
            },
            {
              "message": {
                "text": "The 'iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end, _word_end."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 736,
                  "startLine": 736
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'line_iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 800,
                  "endLine": 800
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'line_iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 800,
                  "startLine": 800
                }
              }
            },
            {
              "message": {
                "text": "The 'line_iterator' constructor contains potentially uninitialized members. Inspect the following: _line_end."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 808,
                  "startLine": 808
                }
              }
            }
          ]
        },
        {
          "ruleId": "V780",
          "message": {
            "text": "Instantiation of array < GuideMarkRec, Mallocator < GuideMarkRec > >: The object 'End()' of a non-passive (non-PDS) type cannot be copied using the memcpy function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269
                }
              }
            }
          ]
        },
        {
          "ruleId": "V780",
          "message": {
            "text": "Instantiation of array < GuideMarkRec, Mallocator < GuideMarkRec > >: The object 'mem' of a non-passive (non-PDS) type cannot be copied using the memcpy function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275
                }
              }
            }
          ]
        },
        {
          "ruleId": "V780",
          "message": {
            "text": "Instantiation of array < GuideMarkRec, Mallocator < GuideMarkRec > >: The object 'mem + size()' of a non-passive (non-PDS) type cannot be copied using the memcpy function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/StdObj/StdObj_prn_lin_AS.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 627,
                  "endLine": 627
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'UtilsArrayBasal' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 397,
                  "endLine": 397
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 447,
                  "endLine": 447
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 607
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_aux_classes.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 311,
                  "endLine": 311
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_aux_classes.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'N > 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1254,
                  "endLine": 1254
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'N > 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1264,
                  "endLine": 1264
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'N > 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1400,
                  "endLine": 1400
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'N > 0' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1410,
                  "endLine": 1410
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'histogram_of_nonnegative_int_field' function is fully equivalent to the body of 'histogram_of_int_field' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2219,
                  "endLine": 2219
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'histogram_of_nonnegative_int_field' function is fully equivalent to the body of 'histogram_of_int_field' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2209,
                  "startLine": 2209
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'histogram_of_nonnegative_int_field' function is fully equivalent to the body of 'histogram_of_int_field' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2219,
                  "startLine": 2219
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'histogram_of_nonnegative_int_field' function is fully equivalent to the body of 'histogram_of_int_field' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2224,
                  "endLine": 2224
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'histogram_of_nonnegative_int_field' function is fully equivalent to the body of 'histogram_of_int_field' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2214,
                  "startLine": 2214
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'histogram_of_nonnegative_int_field' function is fully equivalent to the body of 'histogram_of_int_field' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2224,
                  "startLine": 2224
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1181,
                  "endLine": 1181
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1192,
                  "endLine": 1192
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1216,
                  "endLine": 1216
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1232,
                  "endLine": 1232
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1317,
                  "endLine": 1317
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1328,
                  "endLine": 1328
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1356,
                  "endLine": 1356
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: w == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1372,
                  "endLine": 1372
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: k != 1. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1493,
                  "endLine": 1493
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: d != 0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_functions.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1502,
                  "endLine": 1502
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'n' function argument possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_methods.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'n' local variable possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_methods.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'n' function argument possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_methods.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 378,
                  "endLine": 378
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'n' function argument possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_methods.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 469,
                  "endLine": 469
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'n' function argument possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_methods.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 493,
                  "endLine": 493
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (p_new_ != 0)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_methods.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 310,
                  "endLine": 310
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'a' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_serv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'b' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_serv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'n' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_serv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'f' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_serv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'l' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_serv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector2D < UtilsVectorCoordinate >: An odd precise comparison: x == v.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector2D < UtilsVectorCoordinate >: An odd precise comparison: y == v.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector2D < UtilsVectorCoordinate >: An odd precise comparison: x != v.x. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector2D < UtilsVectorCoordinate >: An odd precise comparison: y != v.y. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector2D < UtilsVectorCoordinate >: An odd precise comparison: x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector2D < UtilsVectorCoordinate >: An odd precise comparison: y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.x == m.x.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.y == m.x.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.x == m.y.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.y == m.y.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.x != m.x.x. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.y != m.x.y. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.x != m.y.x. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.y != m.y.y. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.x == 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: x.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix2D < UtilsVectorCoordinate >: An odd precise comparison: y.y == 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: A == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 572,
                  "endLine": 572
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: B == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 572,
                  "endLine": 572
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'n' local variable possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 427,
                  "endLine": 427
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'UtilsQuadrangle_' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 447,
                  "endLine": 447
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the fourth argument 'const double& center_y' with 'double center_y'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 528,
                  "endLine": 528
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the third argument 'const double& center_x' with 'double center_x'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 528,
                  "endLine": 528
                }
              }
            }
          ]
        },
        {
          "ruleId": "V525",
          "message": {
            "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 452,
                  "endLine": 452
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 452,
                  "startLine": 452
                }
              }
            },
            {
              "message": {
                "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 453,
                  "startLine": 453
                }
              }
            },
            {
              "message": {
                "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 454,
                  "startLine": 454
                }
              }
            },
            {
              "message": {
                "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 455,
                  "startLine": 455
                }
              }
            },
            {
              "message": {
                "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 456,
                  "startLine": 456
                }
              }
            },
            {
              "message": {
                "text": "The code contains the collection of similar blocks. Check items 'x', 'y', 'z', 'y', 'z', 'x' in lines 452, 453, 454, 455, 456, 457."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 457,
                  "startLine": 457
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: x == v.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: y == v.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: z == v.z. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: x != v.x. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: y != v.y. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: z != v.z. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsVector3D < double >: An odd precise comparison: z == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.x == m.x.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.y == m.x.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.z == m.x.z. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.x == m.y.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.y == m.y.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.z == m.y.z. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.x == m.z.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.y == m.z.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.z == m.z.z. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.z == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.z == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.z == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.x == 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: x.z == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.y == 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: y.z == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.x == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.y == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "Instantiation of UtilsMatrix3D < double >: An odd precise comparison: z.z == 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v[i]) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 514
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v_[i]) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 516,
                  "endLine": 516
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(d[i]) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 523,
                  "endLine": 523
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v[i]) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 524,
                  "endLine": 524
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v_) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 541,
                  "endLine": 541
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v) != 0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 542,
                  "endLine": 542
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(s) != 0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 552,
                  "endLine": 552
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 573,
                  "endLine": 573
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(v_) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 580,
                  "endLine": 580
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: norm(d) == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 588,
                  "endLine": 588
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'UtilsVector3D' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsArray/UtilsArray_vector_3D.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 316,
                  "endLine": 316
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'rc.right - rc.left + 1' operator to the 'size_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2260,
                  "endLine": 2260
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1068",
          "message": {
            "text": "Do not define an unnamed namespace in a header file."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'new_dir2' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1111,
                  "endLine": 1111
                }
              }
            }
          ]
        },
        {
          "ruleId": "V537",
          "message": {
            "text": "Consider reviewing the correctness of 'new_dir2' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1125,
                  "endLine": 1125
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'cosA', 'sinA' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'sqrt(2.0) / 2.0' expression. Check lines: 600, 601."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 601,
                  "endLine": 601
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Variables 'cosA', 'sinA' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'sqrt(2.0) / 2.0' expression. Check lines: 600, 601."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 600,
                  "startLine": 600
                }
              }
            },
            {
              "message": {
                "text": "Variables 'cosA', 'sinA' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'sqrt(2.0) / 2.0' expression. Check lines: 600, 601."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 601,
                  "startLine": 601
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables 'max_num_black_pixels', 'max_num_white_pixels' are initialized through the evaluation of the same expression. It's probably an error or un-optimized code. Check lines: 2224, 2225."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2225,
                  "endLine": 2225
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Variables 'max_num_black_pixels', 'max_num_white_pixels' are initialized through the evaluation of the same expression. It's probably an error or un-optimized code. Check lines: 2224, 2225."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2224,
                  "startLine": 2224
                }
              }
            },
            {
              "message": {
                "text": "Variables 'max_num_black_pixels', 'max_num_white_pixels' are initialized through the evaluation of the same expression. It's probably an error or un-optimized code. Check lines: 2224, 2225."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2225,
                  "startLine": 2225
                }
              }
            }
          ]
        },
        {
          "ruleId": "V669",
          "message": {
            "text": "The 'w', 'h' arguments are non-constant references. The analyzer is unable to determine the position at which this argument is being modified. It is possible that the function contains an error."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 914,
                  "endLine": 914
                }
              }
            }
          ]
        },
        {
          "ruleId": "V669",
          "message": {
            "text": "The 'w', 'h' arguments are non-constant references. The analyzer is unable to determine the position at which this argument is being modified. It is possible that the function contains an error."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 935,
                  "endLine": 935
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 282,
                  "endLine": 282
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'w << 1' operator to the 'size_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'w << 1' operator to the 'size_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'w + 1' operator to the 'ptrdiff_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'w << 1' operator to the 'ptrdiff_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'w << 1' operator to the 'ptrdiff_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the 'w << 1' operator to the 'ptrdiff_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1028",
          "message": {
            "text": "Possible overflow. Consider casting operands of the '(w - 1) << 1' operator to the 'ptrdiff_t' type, not the result."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_CC_tools_prv.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_contours.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'BOX' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_contours.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_contours.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'b' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/UtilsImg/UtilsImg_contours.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 399
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 40 to 32 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (BASE::m_ptr)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_Memory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: S == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_geometry.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: prod2 == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_geometry.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "V656",
          "message": {
            "text": "Variables '* var', '* var_packed' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'atoi(line)' expression. Check lines: 129, 130."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_param_rect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Variables '* var', '* var_packed' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'atoi(line)' expression. Check lines: 129, 130."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_param_rect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 129,
                  "startLine": 129
                }
              }
            },
            {
              "message": {
                "text": "Variables '* var', '* var_packed' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the 'atoi(line)' expression. Check lines: 129, 130."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_param_rect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 130,
                  "startLine": 130
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'buff' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_param_rect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'buff' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_param_rect.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_struct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Core/Utils/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "V688",
          "message": {
            "text": "The 'info' function argument possesses the same name as one of the class members, which can result in a confusion."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/AddrDB/AddrDB_struct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/AddrDB/AddrDB_struct.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 216,
                  "endLine": 216
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Dict/Dict_class.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'ret' std::list with std::vector. Contiguous placement of elements in memory can be more efficient."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Dict/Dict_class.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 495,
                  "endLine": 495
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 40 to 32 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/GenOCR/GenOCR.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 96 to 88 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/GenSegL/GenSegL.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'CSetOfLines' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/GuideMarks/GuideMarks_set_of_lines.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/PrnExt/PrnExt.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 64 to 56 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/ModRec.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "V547",
          "message": {
            "text": "Expression 'MP_params->mode == 1' is always true."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3200,
                  "endLine": 3200
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1040",
          "message": {
            "text": "Possible typo in the spelling of a pre-defined macro name. The 'WINRT' macro is similar to 'WINNT'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3599,
                  "endLine": 3599
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'strcpy' function will lead to overflow of the buffer 'MP_params->name_cz_file'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3194,
                  "endLine": 3194
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'strcpy' function will lead to overflow of the buffer 'MP_params->name_st_file'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3195,
                  "endLine": 3195
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'strcpy' function will lead to overflow of the buffer 'MP_params->name_hs_file'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3196,
                  "endLine": 3196
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'strcpy' function will lead to overflow of the buffer 'MP_params->path_to_idx'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3197,
                  "endLine": 3197
                }
              }
            }
          ]
        },
        {
          "ruleId": "V512",
          "message": {
            "text": "A call of the 'strcpy' function will lead to overflow of the buffer 'USPS_params->serv_name'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3255,
                  "endLine": 3255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) > 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2767,
                  "endLine": 2767
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2962,
                  "endLine": 2962
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3088,
                  "endLine": 3088
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) != 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3099,
                  "endLine": 3099
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) > 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3119,
                  "endLine": 3119
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3130,
                  "endLine": 3130
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) != 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3232,
                  "endLine": 3232
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) != 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3294,
                  "endLine": 3294
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) != 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3335,
                  "endLine": 3335
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) != 0' construct. A more efficient way is to check: str[0] != '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3374,
                  "endLine": 3374
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3438,
                  "endLine": 3438
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3489,
                  "endLine": 3489
                }
              }
            }
          ]
        },
        {
          "ruleId": "V805",
          "message": {
            "text": "Decreased performance. It is inefficient to identify an empty string by using 'strlen(str) == 0' construct. A more efficient way is to check: str[0] == '\\0'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3530,
                  "endLine": 3530
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'str' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 373,
                  "endLine": 373
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'newTry' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2155,
                  "endLine": 2155
                }
              }
            }
          ]
        },
        {
          "ruleId": "V838",
          "message": {
            "text": "Temporary object is constructed during the call of the 'find' function. Consider using an ordered associative container with heterogeneous lookup to avoid construction of temporary objects."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3690,
                  "endLine": 3690
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1086",
          "message": {
            "text": "A call of the 'memset' function will lead to underflow of the buffer 'chq_info->_CHQ_DETECT_FRAUD'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1542,
                  "endLine": 1542
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'v_AddrBook' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2797, 2812."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2812,
                  "endLine": 2812
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'v_AddrBook' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2797, 2812."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2797,
                  "startLine": 2797
                }
              }
            },
            {
              "message": {
                "text": "The 'v_AddrBook' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2797, 2812."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2812,
                  "startLine": 2812
                }
              }
            }
          ]
        },
        {
          "ruleId": "V519",
          "message": {
            "text": "The 'v_AddrBook' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2828, 2843."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2843,
                  "endLine": 2843
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'v_AddrBook' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2828, 2843."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2828,
                  "startLine": 2828
                }
              }
            },
            {
              "message": {
                "text": "The 'v_AddrBook' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2828, 2843."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2843,
                  "startLine": 2843
                }
              }
            }
          ]
        },
        {
          "ruleId": "V522",
          "message": {
            "text": "There might be dereferencing of a potential null pointer 'uniq_dict_name'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3690,
                  "endLine": 3690
                }
              }
            }
          ]
        },
        {
          "ruleId": "V526",
          "message": {
            "text": "The 'strcmp' function returns 0 if corresponding strings are equal. Consider examining the condition for mistakes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1566,
                  "endLine": 1566
                }
              }
            }
          ]
        },
        {
          "ruleId": "V526",
          "message": {
            "text": "The 'strcmp' function returns 0 if corresponding strings are equal. Consider examining the condition for mistakes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 1575,
                  "endLine": 1575
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (ptr != NULL)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2069,
                  "endLine": 2069
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (format)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2289,
                  "endLine": 2289
                }
              }
            }
          ]
        },
        {
          "ruleId": "V809",
          "message": {
            "text": "Verifying that a pointer value is not NULL is not required. The 'if (v_AddressBook)' check can be removed."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 2290,
                  "endLine": 2290
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1004",
          "message": {
            "text": "The 'form_info' pointer was used unsafely after it was verified against nullptr. Check lines: 2875, 3453."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 3453,
                  "endLine": 3453
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'form_info' pointer was used unsafely after it was verified against nullptr. Check lines: 2875, 3453."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 2875,
                  "startLine": 2875
                }
              }
            },
            {
              "message": {
                "text": "The 'form_info' pointer was used unsafely after it was verified against nullptr. Check lines: 2875, 3453."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Project/Project.cpp",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 3453,
                  "startLine": 3453
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 104 to 96 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/ScrSegL/ScrSegL.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ]
        },
        {
          "ruleId": "V524",
          "message": {
            "text": "It is odd that the body of 'Utils_txt_to_display' function is fully equivalent to the body of 'Utils_txt_to_utf8' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Utils/Utils_txt.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 705,
                  "endLine": 705
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Utils_txt_to_display' function is fully equivalent to the body of 'Utils_txt_to_utf8' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Utils/Utils_txt.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 700,
                  "startLine": 700
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Utils_txt_to_display' function is fully equivalent to the body of 'Utils_txt_to_utf8' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "X_Kernel/Utils/Utils_txt.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 705,
                  "startLine": 705
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'HierarchicId' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ComModule/HId/HierarchicId.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'AsString' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/StringHolder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'ToString' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/StringHolder.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 283,
                  "endLine": 283
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'StringSortOptions' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/StringSort.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'StringSortOptionsWithColumn' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/StringSort.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'valueStr' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 358
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextMap.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextMapFormatter.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'TextTableHeader' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextTableHeader.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'TextTableLine' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/Container/TextTableLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 40 to 32 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/array/ArrayUtils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'SmallHandle' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/array/ObjId.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'HandleConverter' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/array/ObjId.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/array/ObjId.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/array/ObjId.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/exceptions/FormattedError.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'BaseDir' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/BaseDir.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'm_MapKeys' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/CFGfile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'm_MapKeys' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/CFGfile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281
                }
              }
            }
          ]
        },
        {
          "ruleId": "V823",
          "message": {
            "text": "Decreased performance. Object may be created in-place in the 'm_MapKeys' container. Consider replacing methods: 'insert' -> 'emplace'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/CFGfile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 292,
                  "endLine": 292
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/CFGfile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/CFGfile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281
                }
              }
            }
          ]
        },
        {
          "ruleId": "V837",
          "message": {
            "text": "The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/CFGfile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 292,
                  "endLine": 292
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/FileFields.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'cache' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/FileTabKob.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The copy constructor is declared as private in the 'LstFile' class, but the default copy assignment operator will still be generated by compiler. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/LstFile.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The copy constructor is declared as private in the 'LstFileForModels' class, but the default copy assignment operator will still be generated by compiler. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/file/LstFileForModels.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "V835",
          "message": {
            "text": "Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/geometry/geometry_utils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 348,
                  "endLine": 348
                }
              }
            }
          ]
        },
        {
          "ruleId": "V703",
          "message": {
            "text": "It is odd that the '_CurrentPeriodMs' field in derived class 'Measurer' overwrites field in base class 'EventEater'. Check lines: MeasureLine.h:208, MeasureLine.h:60."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the '_CurrentPeriodMs' field in derived class 'Measurer' overwrites field in base class 'EventEater'. Check lines: MeasureLine.h:208, MeasureLine.h:60."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 60,
                  "startLine": 60
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the '_CurrentPeriodMs' field in derived class 'Measurer' overwrites field in base class 'EventEater'. Check lines: MeasureLine.h:208, MeasureLine.h:60."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 208,
                  "startLine": 208
                }
              }
            }
          ]
        },
        {
          "ruleId": "V703",
          "message": {
            "text": "It is odd that the '_EmitTime' field in derived class 'Measurer' overwrites field in base class 'EventEater'. Check lines: MeasureLine.h:209, MeasureLine.h:61."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the '_EmitTime' field in derived class 'Measurer' overwrites field in base class 'EventEater'. Check lines: MeasureLine.h:209, MeasureLine.h:61."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 61,
                  "startLine": 61
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the '_EmitTime' field in derived class 'Measurer' overwrites field in base class 'EventEater'. Check lines: MeasureLine.h:209, MeasureLine.h:61."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 209,
                  "startLine": 209
                }
              }
            }
          ]
        },
        {
          "ruleId": "V550",
          "message": {
            "text": "An odd precise comparison: referencePeriodInSec != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 310,
                  "endLine": 310
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'aOuput' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'aOutput' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/math/MeasureLine.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 750,
                  "endLine": 750
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'AllocGrpPush' constructor contains potentially uninitialized members. Inspect the following: _grp, _filename, _line, _destroy."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/AllocGrpPush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'AllocGrpPush' constructor contains potentially uninitialized members. Inspect the following: _grp, _filename, _line, _destroy."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/AllocGrpPush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 42,
                  "startLine": 42
                }
              }
            },
            {
              "message": {
                "text": "The 'AllocGrpPush' constructor contains potentially uninitialized members. Inspect the following: _grp, _filename, _line, _destroy."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/AllocGrpPush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 51,
                  "startLine": 51
                }
              }
            },
            {
              "message": {
                "text": "The 'AllocGrpPush' constructor contains potentially uninitialized members. Inspect the following: _grp, _filename, _line, _destroy."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/AllocGrpPush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 52,
                  "startLine": 52
                }
              }
            },
            {
              "message": {
                "text": "The 'AllocGrpPush' constructor contains potentially uninitialized members. Inspect the following: _grp, _filename, _line, _destroy."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/AllocGrpPush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 53,
                  "startLine": 53
                }
              }
            },
            {
              "message": {
                "text": "The 'AllocGrpPush' constructor contains potentially uninitialized members. Inspect the following: _grp, _filename, _line, _destroy."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/AllocGrpPush.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 54,
                  "startLine": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/Mallocator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/Mallocator.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/SmartCountingPointer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/SmartCountingPointer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/SmartCountingPointer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty destructor body."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/SmartCountingPointer.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/allocgrp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1077",
          "message": {
            "text": "The 'AllocGrp' constructor contains potentially uninitialized members. Inspect the following: _blockSize, _reset."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/allocgrp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'AllocGrp' constructor contains potentially uninitialized members. Inspect the following: _blockSize, _reset."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/allocgrp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 101,
                  "startLine": 101
                }
              }
            },
            {
              "message": {
                "text": "The 'AllocGrp' constructor contains potentially uninitialized members. Inspect the following: _blockSize, _reset."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/allocgrp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 113,
                  "startLine": 113
                }
              }
            },
            {
              "message": {
                "text": "The 'AllocGrp' constructor contains potentially uninitialized members. Inspect the following: _blockSize, _reset."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/allocgrp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "endLine": 114,
                  "startLine": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'pPampersModule' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/memory/allocgrp.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 335,
                  "endLine": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "V667",
          "message": {
            "text": "The 'throw' operator does not possess any arguments and is not situated within the 'catch' block."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/platform/RetryWithDelay.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 288,
                  "endLine": 288
                }
              }
            }
          ]
        },
        {
          "ruleId": "V667",
          "message": {
            "text": "The 'throw' operator does not possess any arguments and is not situated within the 'catch' block."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/platform/RetryWithDelay.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307
                }
              }
            }
          ]
        },
        {
          "ruleId": "V839",
          "message": {
            "text": "The 'what' function returns a constant value. This may interfere with move semantics."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/process/ProcessCreate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1040",
          "message": {
            "text": "Possible typo in the spelling of a pre-defined macro name. The 'WINRT' macro is similar to 'WINNT'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/process/ProcessCreate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1040",
          "message": {
            "text": "Possible typo in the spelling of a pre-defined macro name. The 'WINRT' macro is similar to 'WINNT'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/process/ProcessCreate.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'PseudoVariables' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/string/Template/PseudoVariables.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "V690",
          "message": {
            "text": "The 'Utf8Cp1252Transcoder_Base' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/string/Unicode/Utf8OrCp1252Transcoder_Base.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ]
        },
        {
          "ruleId": "V826",
          "message": {
            "text": "Consider replacing the 'result' std::list with std::vector. Contiguous placement of elements in memory can be more efficient."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/test/TestUtils.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1040",
          "message": {
            "text": "Possible typo in the spelling of a pre-defined macro name. The 'WINRT' macro is similar to 'WINNT'."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/OpenMpThreadingRule.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'name' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/OpenMpThreadingRule.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The 'unsetenv' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/OpenMpThreadingRule.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the compiler generated constructor. Consider inspecting: _var."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287
                }
              }
            }
          ]
        },
        {
          "ruleId": "V832",
          "message": {
            "text": "It's better to use '= default;' syntax instead of empty constructor body."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 301,
                  "endLine": 301
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1089",
          "message": {
            "text": "Waiting on condition variable without predicate. A thread can wait indefinitely or experience a spurious wakeup. Consider passing a predicate as the second argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The '_instance' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/thread/Utils_thread.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "V730",
          "message": {
            "text": "Not all members of a class are initialized inside the constructor. Consider inspecting: WaitingSince, LastMutexUpdate."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/trace/ThreadStateWatcher.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ]
        },
        {
          "ruleId": "V820",
          "message": {
            "text": "The 'receiver' variable is not used after copying. Copying can be replaced with move/swap for optimization."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/trace/TraceStory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 288,
                  "endLine": 288
                }
              }
            }
          ]
        },
        {
          "ruleId": "V1096",
          "message": {
            "text": "The '_zeSet' variable with static storage duration is declared inside the inline function with external linkage. This may lead to ODR violation."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/trace/TraceStory.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 48 to 40 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "oldReco/INSEG/INSEG.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "V802",
          "message": {
            "text": "On 64-bit platform, structure size can be reduced from 40 to 32 bytes by rearranging the fields according to their sizes in decreasing order."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "oldReco/KORN/KORN_TRIE_dico.h",
                  "uriBaseId": "SRT"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ]
        }
      ],
      "originalUriBaseIds": {
        "SRT": {
          "uri": "file://D/TC/work/daily/prod.dev-695/"
        }
      }
    }
  ]
}
